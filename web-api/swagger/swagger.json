{
  "openapi": "3.0.0",
  "info": {
    "title": "Swagger Json",
    "description": "This is a generated swagger json for your sails project",
    "termsOfService": "http://example.com/terms",
    "contact": {
      "name": "Theophilus Omoregbee",
      "url": "http://github.com/theo4u",
      "email": "theo4u@ymail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:1337/"
    }
  ],
  "externalDocs": {
    "url": "https://theoomoregbee.github.io/"
  },
  "tags": [
    {
      "name": "Accessorial",
      "description": "Sails blueprint actions for the **Accessorial** model"
    },
    {
      "name": "CargoDetail",
      "description": "Sails blueprint actions for the **CargoDetail** model"
    },
    {
      "name": "CargoType",
      "description": "Sails blueprint actions for the **CargoType** model"
    },
    {
      "name": "Commodity",
      "description": "Sails blueprint actions for the **Commodity** model"
    },
    {
      "name": "Company",
      "description": "Sails blueprint actions for the **Company** model"
    },
    {
      "name": "Contact",
      "description": "Sails blueprint actions for the **Contact** model"
    },
    {
      "name": "Email",
      "description": "Sails blueprint actions for the **Email** model"
    },
    {
      "name": "Equipment",
      "description": "Sails blueprint actions for the **Equipment** model"
    },
    {
      "name": "Inventory",
      "description": "Sails blueprint actions for the **Inventory** model"
    },
    {
      "name": "Note",
      "description": "Sails blueprint actions for the **Note** model"
    },
    {
      "name": "Quote",
      "description": "Sails blueprint actions for the **Quote** model"
    },
    {
      "name": "Stop",
      "description": "Sails blueprint actions for the **Stop** model"
    },
    {
      "name": "Task",
      "description": "Sails blueprint actions for the **Task** model"
    },
    {
      "name": "User",
      "description": "Sails blueprint actions for the **User** model"
    },
    {
      "name": "Auth"
    },
    {
      "name": "Common"
    }
  ],
  "components": {
    "schemas": {
      "accessorial": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/accessorial-without-required-constraint"
          }
        ]
      },
      "accessorial-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **Accessorial**",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "uniqueItems": true,
            "description": "Note Sails special attributes: autoIncrement"
          },
          "createdAt": {
            "type": "number",
            "format": "double"
          },
          "updatedAt": {
            "type": "number",
            "format": "double"
          },
          "name": {
            "type": "string",
            "maxLength": 30
          },
          "quantity": {
            "type": "number",
            "format": "double"
          },
          "rate": {
            "type": "number",
            "format": "double"
          },
          "totalRate": {
            "type": "number",
            "format": "double"
          },
          "isIncludeInCharges": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "description": {
            "type": "string",
            "maxLength": 250
          },
          "quoteId": {
            "description": "JSON dictionary representing the **quote** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/quote"
              }
            ]
          }
        }
      },
      "cargodetail": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/cargodetail-without-required-constraint"
          }
        ]
      },
      "cargodetail-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **CargoDetail**",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "uniqueItems": true,
            "description": "Note Sails special attributes: autoIncrement"
          },
          "createdAt": {
            "type": "number",
            "format": "double"
          },
          "updatedAt": {
            "type": "number",
            "format": "double"
          },
          "equipmentId": {
            "description": "JSON dictionary representing the **equipment** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/equipment"
              }
            ]
          },
          "commodityId": {
            "description": "JSON dictionary representing the **commodity** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/commodity"
              }
            ]
          },
          "weight": {
            "type": "number",
            "format": "double"
          },
          "cargoValue": {
            "type": "number",
            "format": "double"
          },
          "temperature": {
            "type": "number",
            "format": "double"
          },
          "pieces": {
            "type": "number",
            "format": "double"
          },
          "isHazmat": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "hazmatName": {
            "type": "string",
            "nullable": true
          },
          "hazmatClass": {
            "type": "string",
            "nullable": true
          },
          "hazmatUN": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true,
            "maxLength": 10
          },
          "comments": {
            "type": "string",
            "nullable": true,
            "maxLength": 250
          },
          "cargoTypeId": {
            "description": "JSON dictionary representing the **cargotype** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/cargotype"
              }
            ]
          },
          "quoteId": {
            "description": "JSON dictionary representing the **quote** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/quote"
              }
            ]
          },
          "createdBy": {
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/user"
              }
            ]
          },
          "updatedBy": {
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/user"
              }
            ]
          },
          "isDeleted": {
            "type": "boolean",
            "nullable": true,
            "default": false
          }
        }
      },
      "cargotype": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/cargotype-without-required-constraint"
          }
        ]
      },
      "cargotype-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **CargoType**",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "uniqueItems": true,
            "description": "Note Sails special attributes: autoIncrement"
          },
          "createdAt": {
            "type": "number",
            "format": "double"
          },
          "updatedAt": {
            "type": "number",
            "format": "double"
          },
          "name": {
            "type": "string",
            "maxLength": 30
          }
        }
      },
      "commodity": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/commodity-without-required-constraint"
          }
        ]
      },
      "commodity-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **Commodity**",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "uniqueItems": true,
            "description": "Note Sails special attributes: autoIncrement"
          },
          "createdAt": {
            "type": "number",
            "format": "double"
          },
          "updatedAt": {
            "type": "number",
            "format": "double"
          },
          "name": {
            "type": "string",
            "maxLength": 30
          }
        }
      },
      "company": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/company-without-required-constraint"
          },
          {
            "required": [
              "name",
              "email"
            ]
          }
        ]
      },
      "company-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **Company**",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "uniqueItems": true,
            "description": "Note Sails special attributes: autoIncrement"
          },
          "createdAt": {
            "type": "number",
            "format": "double"
          },
          "updatedAt": {
            "type": "number",
            "format": "double"
          },
          "name": {
            "type": "string",
            "maxLength": 200
          },
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 250
          },
          "type": {
            "type": "string",
            "nullable": true,
            "maxLength": 15
          },
          "status": {
            "type": "string",
            "nullable": true,
            "maxLength": 10
          },
          "phone": {
            "type": "string",
            "nullable": true,
            "maxLength": 15
          },
          "extension": {
            "type": "string",
            "nullable": true,
            "maxLength": 5
          },
          "address1": {
            "type": "string",
            "nullable": true,
            "maxLength": 100
          },
          "address2": {
            "type": "string",
            "nullable": true,
            "maxLength": 100
          },
          "city": {
            "type": "string",
            "nullable": true,
            "maxLength": 50
          },
          "zipcode": {
            "type": "string",
            "nullable": true,
            "maxLength": 10
          },
          "state": {
            "type": "string",
            "nullable": true,
            "maxLength": 50
          },
          "country": {
            "type": "string",
            "nullable": true,
            "maxLength": 50
          },
          "employeesCount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "revenue": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "mainContact": {
            "description": "JSON dictionary representing the **contact** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/contact"
              }
            ]
          },
          "createdBy": {
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/user"
              }
            ]
          },
          "updatedBy": {
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/user"
              }
            ]
          },
          "isDeleted": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "contacts": {
            "description": "Array of **contact**'s or array of FK's when creating / updating / not populated",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/contact"
            }
          }
        }
      },
      "contact": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/contact-without-required-constraint"
          },
          {
            "required": [
              "firstName",
              "lastName",
              "email",
              "companyId"
            ]
          }
        ]
      },
      "contact-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **Contact**",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "uniqueItems": true,
            "description": "Note Sails special attributes: autoIncrement"
          },
          "createdAt": {
            "type": "number",
            "format": "double"
          },
          "updatedAt": {
            "type": "number",
            "format": "double"
          },
          "firstName": {
            "type": "string",
            "maxLength": 30
          },
          "lastName": {
            "type": "string",
            "maxLength": 30
          },
          "fullName": {
            "type": "string",
            "maxLength": 100
          },
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 250
          },
          "companyId": {
            "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/company"
              }
            ]
          },
          "status": {
            "type": "string",
            "nullable": true,
            "maxLength": 10
          },
          "department": {
            "type": "string",
            "nullable": true,
            "maxLength": 50
          },
          "jobTitle": {
            "type": "string",
            "nullable": true,
            "maxLength": 50
          },
          "phone": {
            "type": "string",
            "nullable": true,
            "maxLength": 15
          },
          "extension": {
            "type": "string",
            "nullable": true,
            "maxLength": 5
          },
          "address1": {
            "type": "string",
            "nullable": true,
            "maxLength": 100
          },
          "address2": {
            "type": "string",
            "nullable": true,
            "maxLength": 100
          },
          "city": {
            "type": "string",
            "nullable": true,
            "maxLength": 50
          },
          "zipcode": {
            "type": "string",
            "nullable": true,
            "maxLength": 10
          },
          "state": {
            "type": "string",
            "nullable": true,
            "maxLength": 50
          },
          "country": {
            "type": "string",
            "nullable": true,
            "maxLength": 50
          },
          "birthDate": {
            "type": "string",
            "nullable": true,
            "maxLength": 15
          },
          "isDeleted": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "createdBy": {
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/user"
              }
            ]
          },
          "updatedBy": {
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/user"
              }
            ]
          }
        }
      },
      "email": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/email-without-required-constraint"
          }
        ]
      },
      "email-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **Email**",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "uniqueItems": true,
            "description": "Note Sails special attributes: autoIncrement"
          },
          "createdAt": {
            "type": "number",
            "format": "double"
          },
          "updatedAt": {
            "type": "number",
            "format": "double"
          },
          "type": {
            "type": "string",
            "maxLength": 10
          },
          "title": {
            "type": "string",
            "maxLength": 100
          },
          "message": {
            "type": "string",
            "maxLength": 5000
          },
          "to": {
            "type": "string",
            "maxLength": 5000
          },
          "from": {
            "type": "string",
            "maxLength": 5000
          },
          "isCritical": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "quoteId": {
            "description": "JSON dictionary representing the **quote** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/quote"
              }
            ]
          },
          "contactId": {
            "description": "JSON dictionary representing the **contact** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/contact"
              }
            ]
          },
          "companyId": {
            "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/company"
              }
            ]
          },
          "inventoryId": {
            "description": "JSON dictionary representing the **inventory** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/inventory"
              }
            ]
          },
          "userId": {
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/user"
              }
            ]
          }
        }
      },
      "equipment": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/equipment-without-required-constraint"
          }
        ]
      },
      "equipment-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **Equipment**",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "uniqueItems": true,
            "description": "Note Sails special attributes: autoIncrement"
          },
          "createdAt": {
            "type": "number",
            "format": "double"
          },
          "updatedAt": {
            "type": "number",
            "format": "double"
          },
          "name": {
            "type": "string",
            "maxLength": 30
          }
        }
      },
      "inventory": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/inventory-without-required-constraint"
          },
          {
            "required": [
              "trackingNumber"
            ]
          }
        ]
      },
      "inventory-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **Inventory**",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "uniqueItems": true,
            "description": "Note Sails special attributes: autoIncrement"
          },
          "createdAt": {
            "type": "number",
            "format": "double"
          },
          "updatedAt": {
            "type": "number",
            "format": "double"
          },
          "packageId": {
            "type": "string",
            "maxLength": 50
          },
          "trackingNumber": {
            "type": "string",
            "maxLength": 50
          },
          "company": {
            "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/company"
              }
            ]
          },
          "type": {
            "type": "string",
            "maxLength": 50
          },
          "deviceType": {
            "type": "string",
            "maxLength": 15
          },
          "status": {
            "type": "string",
            "nullable": true,
            "maxLength": 10
          },
          "length": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "width": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "height": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "lwhType": {
            "type": "string",
            "default": "in",
            "maxLength": 10,
            "example": "in"
          },
          "weight": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "weightType": {
            "type": "string",
            "default": "lb",
            "maxLength": 10,
            "example": "lb"
          },
          "location": {
            "type": "string",
            "maxLength": 254
          },
          "notes": {
            "type": "string",
            "maxLength": 254
          },
          "createdBy": {
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/user"
              }
            ]
          },
          "updatedBy": {
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/user"
              }
            ]
          },
          "isDeleted": {
            "type": "boolean",
            "nullable": true,
            "default": false
          }
        }
      },
      "note": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/note-without-required-constraint"
          }
        ]
      },
      "note-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **Note**",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "uniqueItems": true,
            "description": "Note Sails special attributes: autoIncrement"
          },
          "createdAt": {
            "type": "number",
            "format": "double"
          },
          "updatedAt": {
            "type": "number",
            "format": "double"
          },
          "type": {
            "type": "string",
            "maxLength": 10
          },
          "title": {
            "type": "string",
            "maxLength": 100
          },
          "message": {
            "type": "string",
            "maxLength": 5000
          },
          "isCritical": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "quoteId": {
            "description": "JSON dictionary representing the **quote** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/quote"
              }
            ]
          },
          "contactId": {
            "description": "JSON dictionary representing the **contact** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/contact"
              }
            ]
          },
          "companyId": {
            "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/company"
              }
            ]
          },
          "inventoryId": {
            "description": "JSON dictionary representing the **inventory** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/inventory"
              }
            ]
          },
          "userId": {
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/user"
              }
            ]
          }
        }
      },
      "quote": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/quote-without-required-constraint"
          }
        ]
      },
      "quote-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **Quote**",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "uniqueItems": true,
            "description": "Note Sails special attributes: autoIncrement"
          },
          "createdAt": {
            "type": "number",
            "format": "double"
          },
          "updatedAt": {
            "type": "number",
            "format": "double"
          },
          "quoteNumber": {
            "type": "string",
            "maxLength": 50
          },
          "name": {
            "type": "string",
            "maxLength": 50
          },
          "service": {
            "type": "string",
            "maxLength": 50
          },
          "transportMode": {
            "type": "string",
            "maxLength": 50
          },
          "status": {
            "type": "string",
            "nullable": true,
            "maxLength": 10
          },
          "totalCost": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "totalProfit": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "expiryDate": {
            "type": "string",
            "format": "date-time"
          },
          "totalMiles": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "stops": {
            "description": "Array of **stop**'s or array of FK's when creating / updating / not populated",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/stop"
            }
          },
          "accessorials": {
            "description": "Array of **accessorial**'s or array of FK's when creating / updating / not populated",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/accessorial"
            }
          },
          "company": {
            "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/company"
              }
            ]
          },
          "contact": {
            "description": "JSON dictionary representing the **contact** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/contact"
              }
            ]
          },
          "createdBy": {
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/user"
              }
            ]
          },
          "updatedBy": {
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/user"
              }
            ]
          },
          "isDeleted": {
            "type": "boolean",
            "nullable": true,
            "default": false
          }
        }
      },
      "stop": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/stop-without-required-constraint"
          }
        ]
      },
      "stop-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **Stop**",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "uniqueItems": true,
            "description": "Note Sails special attributes: autoIncrement"
          },
          "createdAt": {
            "type": "number",
            "format": "double"
          },
          "updatedAt": {
            "type": "number",
            "format": "double"
          },
          "type": {
            "type": "string",
            "maxLength": 10
          },
          "city": {
            "type": "string",
            "maxLength": 20
          },
          "zipcode": {
            "type": "string",
            "maxLength": 10
          },
          "state": {
            "type": "string",
            "maxLength": 20
          },
          "country": {
            "type": "string",
            "maxLength": 20
          },
          "miles": {
            "type": "number",
            "format": "double"
          },
          "quoteId": {
            "description": "JSON dictionary representing the **quote** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/quote"
              }
            ]
          }
        }
      },
      "task": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/task-without-required-constraint"
          }
        ]
      },
      "task-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **Task**",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "uniqueItems": true,
            "description": "Note Sails special attributes: autoIncrement"
          },
          "createdAt": {
            "type": "number",
            "format": "double"
          },
          "updatedAt": {
            "type": "number",
            "format": "double"
          },
          "type": {
            "type": "string",
            "maxLength": 10
          },
          "subject": {
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "maxLength": 5000
          },
          "priority": {
            "type": "string"
          },
          "dueDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "reminderDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "category": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "assignedTo": {
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/user"
              }
            ]
          },
          "pointOfContact": {
            "description": "JSON dictionary representing the **contact** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/contact"
              }
            ]
          },
          "quoteId": {
            "description": "JSON dictionary representing the **quote** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/quote"
              }
            ]
          },
          "companyId": {
            "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/company"
              }
            ]
          },
          "inventoryId": {
            "description": "JSON dictionary representing the **inventory** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/inventory"
              }
            ]
          },
          "userId": {
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
            "oneOf": [
              {
                "$ref": "#/components/schemas/user"
              }
            ]
          }
        }
      },
      "user": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/user-without-required-constraint"
          },
          {
            "required": [
              "email",
              "password",
              "firstName",
              "lastName"
            ]
          }
        ]
      },
      "user-without-required-constraint": {
        "type": "object",
        "description": "Sails ORM Model **User**",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "uniqueItems": true,
            "description": "Note Sails special attributes: autoIncrement"
          },
          "createdAt": {
            "type": "number",
            "format": "double"
          },
          "updatedAt": {
            "type": "number",
            "format": "double"
          },
          "email": {
            "type": "string",
            "format": "email",
            "maxLength": 200,
            "uniqueItems": true
          },
          "password": {
            "type": "string"
          },
          "firstName": {
            "type": "string",
            "maxLength": 120
          },
          "lastName": {
            "type": "string",
            "maxLength": 120
          },
          "fullName": {
            "type": "string",
            "maxLength": 255
          },
          "isSuperAdmin": {
            "type": "boolean"
          },
          "isAdmin": {
            "type": "boolean"
          },
          "passwordResetToken": {
            "type": "string"
          },
          "passwordResetTokenExpiresAt": {
            "type": "number",
            "format": "double",
            "example": 1502844074211
          },
          "emailProofToken": {
            "type": "string"
          },
          "emailProofTokenExpiresAt": {
            "type": "number",
            "format": "double"
          },
          "userImage": {
            "type": "string",
            "maxLength": 255
          },
          "jobTitle": {
            "type": "string",
            "maxLength": 100
          },
          "department": {
            "type": "string",
            "maxLength": 100
          },
          "location": {
            "type": "string",
            "maxLength": 100
          },
          "phoneNumber": {
            "type": "string",
            "maxLength": 50
          },
          "extension": {
            "type": "string",
            "maxLength": 10
          }
        }
      }
    },
    "parameters": {
      "ModelPKParam-company": {
        "in": "path",
        "name": "_id",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "uniqueItems": true,
          "description": "Note Sails special attributes: autoIncrement"
        },
        "description": "The desired **Company** record's primary key value"
      },
      "ModelPKParam-contact": {
        "in": "path",
        "name": "_id",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "uniqueItems": true,
          "description": "Note Sails special attributes: autoIncrement"
        },
        "description": "The desired **Contact** record's primary key value"
      },
      "ModelPKParam-inventory": {
        "in": "path",
        "name": "_id",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "uniqueItems": true,
          "description": "Note Sails special attributes: autoIncrement"
        },
        "description": "The desired **Inventory** record's primary key value"
      },
      "ModelPKParam-quote": {
        "in": "path",
        "name": "_id",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "uniqueItems": true,
          "description": "Note Sails special attributes: autoIncrement"
        },
        "description": "The desired **Quote** record's primary key value"
      },
      "ModelPKParam-accessorial": {
        "in": "path",
        "name": "_id",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "uniqueItems": true,
          "description": "Note Sails special attributes: autoIncrement"
        },
        "description": "The desired **Accessorial** record's primary key value"
      },
      "ModelPKParam-cargodetail": {
        "in": "path",
        "name": "_id",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "uniqueItems": true,
          "description": "Note Sails special attributes: autoIncrement"
        },
        "description": "The desired **CargoDetail** record's primary key value"
      },
      "ModelPKParam-cargotype": {
        "in": "path",
        "name": "_id",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "uniqueItems": true,
          "description": "Note Sails special attributes: autoIncrement"
        },
        "description": "The desired **CargoType** record's primary key value"
      },
      "ModelPKParam-commodity": {
        "in": "path",
        "name": "_id",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "uniqueItems": true,
          "description": "Note Sails special attributes: autoIncrement"
        },
        "description": "The desired **Commodity** record's primary key value"
      },
      "ModelPKParam-email": {
        "in": "path",
        "name": "_id",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "uniqueItems": true,
          "description": "Note Sails special attributes: autoIncrement"
        },
        "description": "The desired **Email** record's primary key value"
      },
      "ModelPKParam-equipment": {
        "in": "path",
        "name": "_id",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "uniqueItems": true,
          "description": "Note Sails special attributes: autoIncrement"
        },
        "description": "The desired **Equipment** record's primary key value"
      },
      "ModelPKParam-note": {
        "in": "path",
        "name": "_id",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "uniqueItems": true,
          "description": "Note Sails special attributes: autoIncrement"
        },
        "description": "The desired **Note** record's primary key value"
      },
      "ModelPKParam-stop": {
        "in": "path",
        "name": "_id",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "uniqueItems": true,
          "description": "Note Sails special attributes: autoIncrement"
        },
        "description": "The desired **Stop** record's primary key value"
      },
      "ModelPKParam-task": {
        "in": "path",
        "name": "_id",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "uniqueItems": true,
          "description": "Note Sails special attributes: autoIncrement"
        },
        "description": "The desired **Task** record's primary key value"
      },
      "ModelPKParam-user": {
        "in": "path",
        "name": "_id",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64",
          "uniqueItems": true,
          "description": "Note Sails special attributes: autoIncrement"
        },
        "description": "The desired **User** record's primary key value"
      },
      "AttributeFilterParam": {
        "in": "query",
        "name": "_*_",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "To filter results based on a particular attribute, specify a query parameter with the same name as the attribute defined on your model. For instance, if our `Purchase` model has an `amount` attribute, we could send `GET /purchase?amount=99.99` to return a list of $99.99 purchases."
      },
      "WhereQueryParam": {
        "in": "query",
        "name": "where",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "Instead of filtering based on a specific attribute, you may instead choose to provide a `where` parameter with the WHERE piece of a [Waterline criteria](https://sailsjs.com/documentation/concepts/models-and-orm/query-language), _encoded as a JSON string_. This allows you to take advantage of `contains`, `startsWith`, and other sub-attribute criteria modifiers for more powerful `find()` queries.\n\ne.g. `?where={\"name\":{\"contains\":\"theodore\"}}`"
      },
      "LimitQueryParam": {
        "in": "query",
        "name": "limit",
        "required": false,
        "schema": {
          "type": "integer"
        },
        "description": "The maximum number of records to send back (useful for pagination). Defaults to 30."
      },
      "SkipQueryParam": {
        "in": "query",
        "name": "skip",
        "required": false,
        "schema": {
          "type": "integer"
        },
        "description": "The number of records to skip (useful for pagination)."
      },
      "SortQueryParam": {
        "in": "query",
        "name": "sort",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "The sort order. By default, returned records are sorted by primary key value in ascending order.\n\ne.g. `?sort=lastName%20ASC`"
      }
    }
  },
  "paths": {
    "/api/v1/auth/signup": {
      "post": {
        "summary": "/api/v1/auth/signup",
        "tags": [
          "Auth"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/auth/logout": {
      "get": {
        "summary": "/api/v1/auth/logout",
        "tags": [
          "Auth"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "summary": "/api/v1/auth/logout",
        "tags": [
          "Auth"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "/api/v1/auth/logout",
        "tags": [
          "Auth"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "/api/v1/auth/logout",
        "tags": [
          "Auth"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "/api/v1/auth/logout",
        "tags": [
          "Auth"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/auth/login": {
      "post": {
        "summary": "/api/v1/app/auth/login",
        "tags": [
          "Auth"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/user/update-profile": {
      "post": {
        "summary": "/api/v1/app/user/update-profile",
        "tags": [
          "User"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/auth/send-password": {
      "post": {
        "summary": "/api/v1/app/auth/send-password",
        "tags": [
          "Auth"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/auth/update-password": {
      "post": {
        "summary": "/api/v1/app/auth/update-password",
        "tags": [
          "Auth"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/common/getEquipments": {
      "get": {
        "summary": "/api/v1/app/common/getEquipments",
        "tags": [
          "Common"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/common/getCargos": {
      "get": {
        "summary": "/api/v1/app/common/getCargos",
        "tags": [
          "Common"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/common/getCommodities": {
      "get": {
        "summary": "/api/v1/app/common/getCommodities",
        "tags": [
          "Common"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/user/detail": {
      "get": {
        "summary": "/api/v1/app/user/detail",
        "tags": [
          "User"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/user/update": {
      "post": {
        "summary": "/api/v1/app/user/update",
        "tags": [
          "User"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/user/updatePassword": {
      "post": {
        "summary": "/api/v1/app/user/updatePassword",
        "tags": [
          "User"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/user/uploadProfileImage": {
      "post": {
        "summary": "/api/v1/app/user/uploadProfileImage",
        "tags": [
          "User"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/company/create": {
      "post": {
        "summary": "Create Company",
        "description": "Create a new **Company** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Company"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Company** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/company"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Company instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/company"
              }
            }
          }
        }
      }
    },
    "/api/v1/app/company/update": {
      "post": {
        "summary": "Update Company",
        "description": "Update an existing **Company** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-company"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Company** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/company"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Company** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Company instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/company-without-required-constraint"
              }
            }
          }
        }
      }
    },
    "/api/v1/app/company/list": {
      "post": {
        "summary": "/api/v1/app/company/list",
        "tags": [
          "Company"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/company/listOfNames": {
      "get": {
        "summary": "/api/v1/app/company/listOfNames",
        "tags": [
          "Company"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/company/deleteRange": {
      "post": {
        "summary": "/api/v1/app/company/deleteRange",
        "tags": [
          "Company"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/contact/create": {
      "post": {
        "summary": "Create Contact",
        "description": "Create a new **Contact** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Contact"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Contact** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contact"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Contact instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/contact"
              }
            }
          }
        }
      }
    },
    "/api/v1/app/contact/update": {
      "post": {
        "summary": "Update Contact",
        "description": "Update an existing **Contact** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Contact"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-contact"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Contact** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contact"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Contact** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Contact instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/contact-without-required-constraint"
              }
            }
          }
        }
      }
    },
    "/api/v1/app/contact/list": {
      "post": {
        "summary": "/api/v1/app/contact/list",
        "tags": [
          "Contact"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/contact/deleteRange": {
      "post": {
        "summary": "/api/v1/app/contact/deleteRange",
        "tags": [
          "Contact"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/inventory/create": {
      "post": {
        "summary": "Create Inventory",
        "description": "Create a new **Inventory** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Inventory"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Inventory** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inventory"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Inventory instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/inventory"
              }
            }
          }
        }
      }
    },
    "/api/v1/app/inventory/update": {
      "post": {
        "summary": "Update Inventory",
        "description": "Update an existing **Inventory** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Inventory"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-inventory"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Inventory** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inventory"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Inventory** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Inventory instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/inventory-without-required-constraint"
              }
            }
          }
        }
      }
    },
    "/api/v1/app/inventory/list": {
      "post": {
        "summary": "/api/v1/app/inventory/list",
        "tags": [
          "Inventory"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/inventory/deleteRange": {
      "post": {
        "summary": "/api/v1/app/inventory/deleteRange",
        "tags": [
          "Inventory"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/quote/create": {
      "post": {
        "summary": "Create Quote",
        "description": "Create a new **Quote** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Quote"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Quote** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quote"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Quote instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/quote"
              }
            }
          }
        }
      }
    },
    "/api/v1/app/quote/update": {
      "post": {
        "summary": "Update Quote",
        "description": "Update an existing **Quote** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Quote"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-quote"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Quote** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quote"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Quote** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Quote instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/quote-without-required-constraint"
              }
            }
          }
        }
      }
    },
    "/api/v1/app/quote/list": {
      "post": {
        "summary": "/api/v1/app/quote/list",
        "tags": [
          "Quote"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/quote/deleteRange": {
      "post": {
        "summary": "/api/v1/app/quote/deleteRange",
        "tags": [
          "Quote"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/quote/getCompanies": {
      "get": {
        "summary": "/api/v1/app/quote/getCompanies",
        "tags": [
          "Quote"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/quote/createNote": {
      "post": {
        "summary": "/api/v1/app/quote/createNote",
        "tags": [
          "Quote"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/quote/createTask": {
      "post": {
        "summary": "/api/v1/app/quote/createTask",
        "tags": [
          "Quote"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/task/create": {
      "post": {
        "summary": "Create Task",
        "description": "Create a new **Task** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Task"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Task** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/task"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Task instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/task"
              }
            }
          }
        }
      }
    },
    "/api/v1/app/task/list": {
      "post": {
        "summary": "/api/v1/app/task/list",
        "tags": [
          "Task"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/task/deleteRange": {
      "post": {
        "summary": "/api/v1/app/task/deleteRange",
        "tags": [
          "Task"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/note/create": {
      "post": {
        "summary": "Create Note",
        "description": "Create a new **Note** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Note"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Note** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/note"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Note instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/note"
              }
            }
          }
        }
      }
    },
    "/api/v1/app/note/list": {
      "post": {
        "summary": "/api/v1/app/note/list",
        "tags": [
          "Note"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/note/deleteRange": {
      "post": {
        "summary": "/api/v1/app/note/deleteRange",
        "tags": [
          "Note"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/email/create": {
      "post": {
        "summary": "Create Email",
        "description": "Create a new **Email** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Email"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Email** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/email"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Email instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/email"
              }
            }
          }
        }
      }
    },
    "/api/v1/app/email/list": {
      "post": {
        "summary": "/api/v1/app/email/list",
        "tags": [
          "Email"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/email/deleteRange": {
      "post": {
        "summary": "/api/v1/app/email/deleteRange",
        "tags": [
          "Email"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/company/find/{_id}": {
      "get": {
        "summary": "/api/v1/app/company/find/{_id}",
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/company/delete/{_id}": {
      "delete": {
        "summary": "/api/v1/app/company/delete/{_id}",
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/contact/find/{_id}": {
      "get": {
        "summary": "/api/v1/app/contact/find/{_id}",
        "tags": [
          "Contact"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/contact/delete/{_id}": {
      "delete": {
        "summary": "/api/v1/app/contact/delete/{_id}",
        "tags": [
          "Contact"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/inventory/find/{_id}": {
      "get": {
        "summary": "/api/v1/app/inventory/find/{_id}",
        "tags": [
          "Inventory"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/inventory/delete/{_id}": {
      "delete": {
        "summary": "/api/v1/app/inventory/delete/{_id}",
        "tags": [
          "Inventory"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/quote/find/{_id}": {
      "get": {
        "summary": "/api/v1/app/quote/find/{_id}",
        "tags": [
          "Quote"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/quote/getQuoteDetails/{_id}": {
      "get": {
        "summary": "/api/v1/app/quote/getQuoteDetails/{_id}",
        "tags": [
          "Quote"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/quote/delete/{_id}": {
      "delete": {
        "summary": "/api/v1/app/quote/delete/{_id}",
        "tags": [
          "Quote"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/quote/getContactsByCompany/{_id}": {
      "get": {
        "summary": "/api/v1/app/quote/getContactsByCompany/{_id}",
        "tags": [
          "Quote"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/task/delete/{_id}": {
      "delete": {
        "summary": "/api/v1/app/task/delete/{_id}",
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/note/delete/{_id}": {
      "delete": {
        "summary": "/api/v1/app/note/delete/{_id}",
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/email/delete/{_id}": {
      "delete": {
        "summary": "/api/v1/app/email/delete/{_id}",
        "tags": [
          "Email"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/task/{_id}": {
      "post": {
        "summary": "/api/v1/app/task/{_id}",
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/note/{_id}": {
      "post": {
        "summary": "/api/v1/app/note/{_id}",
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/email/{_id}": {
      "post": {
        "summary": "/api/v1/app/email/{_id}",
        "tags": [
          "Email"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/quote/{_id}/notes": {
      "post": {
        "summary": "/api/v1/app/quote/{_id}/notes",
        "tags": [
          "Quote"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v1/app/quote/{_id}/tasks": {
      "post": {
        "summary": "/api/v1/app/quote/{_id}/tasks",
        "tags": [
          "Quote"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Route pattern variable `_id`"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/accessorial/find": {
      "get": {
        "summary": "List Accessorial (find where) *",
        "description": "Find a list of **Accessorial** records that match the specified criteria.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Accessorial"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name,quantity,rate,totalRate,isIncludeInCharges,description,quoteId"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name,quantity,rate,totalRate,isIncludeInCharges,description,quoteId"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,quoteId"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Accessorial** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/accessorial"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/accessorial/find/{_id}": {
      "get": {
        "summary": "Get Accessorial (find one) *",
        "description": "Look up the **Accessorial** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Accessorial"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-accessorial"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name,quantity,rate,totalRate,isIncludeInCharges,description,quoteId"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name,quantity,rate,totalRate,isIncludeInCharges,description,quoteId"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,quoteId"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Accessorial** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/accessorial"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Accessorial** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/accessorial/create": {
      "get": {
        "summary": "Create Accessorial *",
        "description": "Create a new **Accessorial** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Accessorial"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string",
              "maxLength": 30
            }
          },
          {
            "in": "query",
            "name": "quantity",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "rate",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "totalRate",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "isIncludeInCharges",
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false
            }
          },
          {
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string",
              "maxLength": 250
            }
          },
          {
            "in": "query",
            "name": "quoteId",
            "schema": {
              "description": "JSON dictionary representing the **quote** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/quote"
                }
              ]
            },
            "description": "JSON dictionary representing the **quote** instance or FK when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Accessorial** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/accessorial"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/accessorial/update/{_id}": {
      "get": {
        "summary": "Update Accessorial *",
        "description": "Update an existing **Accessorial** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Accessorial"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-accessorial"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string",
              "maxLength": 30
            }
          },
          {
            "in": "query",
            "name": "quantity",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "rate",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "totalRate",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "isIncludeInCharges",
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false
            }
          },
          {
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string",
              "maxLength": 250
            }
          },
          {
            "in": "query",
            "name": "quoteId",
            "schema": {
              "description": "JSON dictionary representing the **quote** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/quote"
                }
              ]
            },
            "description": "JSON dictionary representing the **quote** instance or FK when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Accessorial** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/accessorial"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Accessorial** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/accessorial/destroy/{_id}": {
      "get": {
        "summary": "Delete Accessorial (destroy) *",
        "description": "Delete the **Accessorial** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Accessorial"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-accessorial"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Accessorial** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/accessorial"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Accessorial** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/cargodetail/find": {
      "get": {
        "summary": "List CargoDetail (find where) *",
        "description": "Find a list of **CargoDetail** records that match the specified criteria.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "CargoDetail"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,equipmentId,commodityId,weight,cargoValue,temperature,pieces,isHazmat,hazmatName,hazmatClass,hazmatUN,status,comments,cargoTypeId,quoteId,createdBy,updatedBy,isDeleted"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,equipmentId,commodityId,weight,cargoValue,temperature,pieces,isHazmat,hazmatName,hazmatClass,hazmatUN,status,comments,cargoTypeId,quoteId,createdBy,updatedBy,isDeleted"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,equipmentId,commodityId,cargoTypeId,quoteId,createdBy,updatedBy"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **CargoDetail** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/cargodetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/cargodetail/find/{_id}": {
      "get": {
        "summary": "Get CargoDetail (find one) *",
        "description": "Look up the **CargoDetail** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "CargoDetail"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-cargodetail"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,equipmentId,commodityId,weight,cargoValue,temperature,pieces,isHazmat,hazmatName,hazmatClass,hazmatUN,status,comments,cargoTypeId,quoteId,createdBy,updatedBy,isDeleted"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,equipmentId,commodityId,weight,cargoValue,temperature,pieces,isHazmat,hazmatName,hazmatClass,hazmatUN,status,comments,cargoTypeId,quoteId,createdBy,updatedBy,isDeleted"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,equipmentId,commodityId,cargoTypeId,quoteId,createdBy,updatedBy"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **CargoDetail** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cargodetail"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **CargoDetail** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/cargodetail/create": {
      "get": {
        "summary": "Create CargoDetail *",
        "description": "Create a new **CargoDetail** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "CargoDetail"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "equipmentId",
            "schema": {
              "description": "JSON dictionary representing the **equipment** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/equipment"
                }
              ]
            },
            "description": "JSON dictionary representing the **equipment** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "commodityId",
            "schema": {
              "description": "JSON dictionary representing the **commodity** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/commodity"
                }
              ]
            },
            "description": "JSON dictionary representing the **commodity** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "weight",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "cargoValue",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "temperature",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "pieces",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "isHazmat",
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false
            }
          },
          {
            "in": "query",
            "name": "hazmatName",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "hazmatClass",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "hazmatUN",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 10
            }
          },
          {
            "in": "query",
            "name": "comments",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 250
            }
          },
          {
            "in": "query",
            "name": "cargoTypeId",
            "schema": {
              "description": "JSON dictionary representing the **cargotype** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/cargotype"
                }
              ]
            },
            "description": "JSON dictionary representing the **cargotype** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "quoteId",
            "schema": {
              "description": "JSON dictionary representing the **quote** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/quote"
                }
              ]
            },
            "description": "JSON dictionary representing the **quote** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "createdBy",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "updatedBy",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "isDeleted",
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **CargoDetail** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cargodetail"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/cargodetail/update/{_id}": {
      "get": {
        "summary": "Update CargoDetail *",
        "description": "Update an existing **CargoDetail** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "CargoDetail"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-cargodetail"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "equipmentId",
            "schema": {
              "description": "JSON dictionary representing the **equipment** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/equipment"
                }
              ]
            },
            "description": "JSON dictionary representing the **equipment** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "commodityId",
            "schema": {
              "description": "JSON dictionary representing the **commodity** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/commodity"
                }
              ]
            },
            "description": "JSON dictionary representing the **commodity** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "weight",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "cargoValue",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "temperature",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "pieces",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "isHazmat",
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false
            }
          },
          {
            "in": "query",
            "name": "hazmatName",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "hazmatClass",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "hazmatUN",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 10
            }
          },
          {
            "in": "query",
            "name": "comments",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 250
            }
          },
          {
            "in": "query",
            "name": "cargoTypeId",
            "schema": {
              "description": "JSON dictionary representing the **cargotype** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/cargotype"
                }
              ]
            },
            "description": "JSON dictionary representing the **cargotype** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "quoteId",
            "schema": {
              "description": "JSON dictionary representing the **quote** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/quote"
                }
              ]
            },
            "description": "JSON dictionary representing the **quote** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "createdBy",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "updatedBy",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "isDeleted",
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **CargoDetail** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cargodetail"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **CargoDetail** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/cargodetail/destroy/{_id}": {
      "get": {
        "summary": "Delete CargoDetail (destroy) *",
        "description": "Delete the **CargoDetail** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "CargoDetail"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-cargodetail"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **CargoDetail** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cargodetail"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **CargoDetail** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/cargotype/find": {
      "get": {
        "summary": "List CargoType (find where) *",
        "description": "Find a list of **CargoType** records that match the specified criteria.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "CargoType"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **CargoType** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/cargotype"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/cargotype/find/{_id}": {
      "get": {
        "summary": "Get CargoType (find one) *",
        "description": "Look up the **CargoType** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "CargoType"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-cargotype"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **CargoType** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cargotype"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **CargoType** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/cargotype/create": {
      "get": {
        "summary": "Create CargoType *",
        "description": "Create a new **CargoType** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "CargoType"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string",
              "maxLength": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **CargoType** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cargotype"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/cargotype/update/{_id}": {
      "get": {
        "summary": "Update CargoType *",
        "description": "Update an existing **CargoType** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "CargoType"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-cargotype"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string",
              "maxLength": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **CargoType** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cargotype"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **CargoType** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/cargotype/destroy/{_id}": {
      "get": {
        "summary": "Delete CargoType (destroy) *",
        "description": "Delete the **CargoType** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "CargoType"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-cargotype"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **CargoType** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cargotype"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **CargoType** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/commodity/find": {
      "get": {
        "summary": "List Commodity (find where) *",
        "description": "Find a list of **Commodity** records that match the specified criteria.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Commodity"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Commodity** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/commodity"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/commodity/find/{_id}": {
      "get": {
        "summary": "Get Commodity (find one) *",
        "description": "Look up the **Commodity** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Commodity"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-commodity"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Commodity** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/commodity"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Commodity** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/commodity/create": {
      "get": {
        "summary": "Create Commodity *",
        "description": "Create a new **Commodity** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Commodity"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string",
              "maxLength": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Commodity** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/commodity"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/commodity/update/{_id}": {
      "get": {
        "summary": "Update Commodity *",
        "description": "Update an existing **Commodity** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Commodity"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-commodity"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string",
              "maxLength": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Commodity** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/commodity"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Commodity** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/commodity/destroy/{_id}": {
      "get": {
        "summary": "Delete Commodity (destroy) *",
        "description": "Delete the **Commodity** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Commodity"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-commodity"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Commodity** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/commodity"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Commodity** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/company/find": {
      "get": {
        "summary": "List Company (find where) *",
        "description": "Find a list of **Company** records that match the specified criteria.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name,email,type,status,phone,extension,address1,address2,city,zipcode,state,country,employeesCount,revenue,mainContact,createdBy,updatedBy,isDeleted,contacts"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name,email,type,status,phone,extension,address1,address2,city,zipcode,state,country,employeesCount,revenue,mainContact,createdBy,updatedBy,isDeleted,contacts"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,mainContact,createdBy,updatedBy,contacts"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Company** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/company"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/company/find/{_id}": {
      "get": {
        "summary": "Get Company (find one) *",
        "description": "Look up the **Company** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-company"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name,email,type,status,phone,extension,address1,address2,city,zipcode,state,country,employeesCount,revenue,mainContact,createdBy,updatedBy,isDeleted,contacts"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name,email,type,status,phone,extension,address1,address2,city,zipcode,state,country,employeesCount,revenue,mainContact,createdBy,updatedBy,isDeleted,contacts"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,mainContact,createdBy,updatedBy,contacts"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Company** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/company"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Company** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/company/create": {
      "get": {
        "summary": "Create Company *",
        "description": "Create a new **Company** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string",
              "maxLength": 200
            },
            "required": true
          },
          {
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string",
              "format": "email",
              "maxLength": 250
            },
            "required": true
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 15
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 10
            }
          },
          {
            "in": "query",
            "name": "phone",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 15
            }
          },
          {
            "in": "query",
            "name": "extension",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 5
            }
          },
          {
            "in": "query",
            "name": "address1",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 100
            }
          },
          {
            "in": "query",
            "name": "address2",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 100
            }
          },
          {
            "in": "query",
            "name": "city",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 50
            }
          },
          {
            "in": "query",
            "name": "zipcode",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 10
            }
          },
          {
            "in": "query",
            "name": "state",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 50
            }
          },
          {
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 50
            }
          },
          {
            "in": "query",
            "name": "employeesCount",
            "schema": {
              "type": "number",
              "format": "double",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "revenue",
            "schema": {
              "type": "number",
              "format": "double",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "mainContact",
            "schema": {
              "description": "JSON dictionary representing the **contact** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/contact"
                }
              ]
            },
            "description": "JSON dictionary representing the **contact** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "createdBy",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "updatedBy",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "isDeleted",
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false
            }
          },
          {
            "in": "query",
            "name": "contacts",
            "schema": {
              "description": "Array of **contact**'s or array of FK's when creating / updating / not populated",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/contact"
              }
            },
            "description": "Array of **contact**'s or array of FK's when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Company** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/company"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/company/update/{_id}": {
      "get": {
        "summary": "Update Company *",
        "description": "Update an existing **Company** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-company"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string",
              "maxLength": 200
            }
          },
          {
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string",
              "format": "email",
              "maxLength": 250
            }
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 15
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 10
            }
          },
          {
            "in": "query",
            "name": "phone",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 15
            }
          },
          {
            "in": "query",
            "name": "extension",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 5
            }
          },
          {
            "in": "query",
            "name": "address1",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 100
            }
          },
          {
            "in": "query",
            "name": "address2",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 100
            }
          },
          {
            "in": "query",
            "name": "city",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 50
            }
          },
          {
            "in": "query",
            "name": "zipcode",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 10
            }
          },
          {
            "in": "query",
            "name": "state",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 50
            }
          },
          {
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 50
            }
          },
          {
            "in": "query",
            "name": "employeesCount",
            "schema": {
              "type": "number",
              "format": "double",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "revenue",
            "schema": {
              "type": "number",
              "format": "double",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "mainContact",
            "schema": {
              "description": "JSON dictionary representing the **contact** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/contact"
                }
              ]
            },
            "description": "JSON dictionary representing the **contact** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "createdBy",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "updatedBy",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "isDeleted",
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false
            }
          },
          {
            "in": "query",
            "name": "contacts",
            "schema": {
              "description": "Array of **contact**'s or array of FK's when creating / updating / not populated",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/contact"
              }
            },
            "description": "Array of **contact**'s or array of FK's when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Company** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/company"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Company** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/company/destroy/{_id}": {
      "get": {
        "summary": "Delete Company (destroy) *",
        "description": "Delete the **Company** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-company"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Company** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/company"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Company** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/company/{_id}/{association}/add/{childid}": {
      "get": {
        "summary": "Add to for Company *",
        "description": "Add a foreign record to one of this **Company** record's collections.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/add-to",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/add-to"
        },
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-company"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "contacts"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double",
                  "description": "**Company** record's foreign key values to use as the replacement for this collection (**contacts** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Company** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/company"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform add to, **Company** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/company/{_id}/{association}/replace": {
      "get": {
        "summary": "Replace for Company *",
        "description": "Replace all of the child records in one of this **Company** record's associations.\n\nOnly one of the query parameters, that matches the **association** path parameter, should be specified.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/replace",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/replace"
        },
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-company"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "contacts"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "query",
            "name": "contacts",
            "description": "**Company** record's foreign key values to use as the replacement for this collection (**contacts** association)",
            "schema": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "double",
                "description": "**Company** record's foreign key values to use as the replacement for this collection (**contacts** association)",
                "uniqueItems": true
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Company** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/company"
                }
              }
            }
          },
          "404": {
            "description": "Cannot replace, **Company** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/company/{_id}/{association}/remove/{childid}": {
      "get": {
        "summary": "Remove from for Company *",
        "description": "Remove a foreign record from one of this **Company** record's collections.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/remove-from",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/remove-from"
        },
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-company"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "contacts"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double",
                  "description": "**Company** record's foreign key values to use as the replacement for this collection (**contacts** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Company** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/company"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform remove from, **Company** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/contact/find": {
      "get": {
        "summary": "List Contact (find where) *",
        "description": "Find a list of **Contact** records that match the specified criteria.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Contact"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,firstName,lastName,fullName,email,companyId,status,department,jobTitle,phone,extension,address1,address2,city,zipcode,state,country,birthDate,isDeleted,createdBy,updatedBy"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,firstName,lastName,fullName,email,companyId,status,department,jobTitle,phone,extension,address1,address2,city,zipcode,state,country,birthDate,isDeleted,createdBy,updatedBy"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,companyId,createdBy,updatedBy"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Contact** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/contact"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/contact/find/{_id}": {
      "get": {
        "summary": "Get Contact (find one) *",
        "description": "Look up the **Contact** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Contact"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-contact"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,firstName,lastName,fullName,email,companyId,status,department,jobTitle,phone,extension,address1,address2,city,zipcode,state,country,birthDate,isDeleted,createdBy,updatedBy"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,firstName,lastName,fullName,email,companyId,status,department,jobTitle,phone,extension,address1,address2,city,zipcode,state,country,birthDate,isDeleted,createdBy,updatedBy"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,companyId,createdBy,updatedBy"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Contact** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contact"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Contact** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/contact/create": {
      "get": {
        "summary": "Create Contact *",
        "description": "Create a new **Contact** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Contact"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "firstName",
            "schema": {
              "type": "string",
              "maxLength": 30
            },
            "required": true
          },
          {
            "in": "query",
            "name": "lastName",
            "schema": {
              "type": "string",
              "maxLength": 30
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fullName",
            "schema": {
              "type": "string",
              "maxLength": 100
            }
          },
          {
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string",
              "format": "email",
              "maxLength": 250
            },
            "required": true
          },
          {
            "in": "query",
            "name": "companyId",
            "schema": {
              "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/company"
                }
              ]
            },
            "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated",
            "required": true
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 10
            }
          },
          {
            "in": "query",
            "name": "department",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 50
            }
          },
          {
            "in": "query",
            "name": "jobTitle",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 50
            }
          },
          {
            "in": "query",
            "name": "phone",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 15
            }
          },
          {
            "in": "query",
            "name": "extension",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 5
            }
          },
          {
            "in": "query",
            "name": "address1",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 100
            }
          },
          {
            "in": "query",
            "name": "address2",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 100
            }
          },
          {
            "in": "query",
            "name": "city",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 50
            }
          },
          {
            "in": "query",
            "name": "zipcode",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 10
            }
          },
          {
            "in": "query",
            "name": "state",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 50
            }
          },
          {
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 50
            }
          },
          {
            "in": "query",
            "name": "birthDate",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 15
            }
          },
          {
            "in": "query",
            "name": "isDeleted",
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false
            }
          },
          {
            "in": "query",
            "name": "createdBy",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "updatedBy",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Contact** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contact"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/contact/update/{_id}": {
      "get": {
        "summary": "Update Contact *",
        "description": "Update an existing **Contact** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Contact"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-contact"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "firstName",
            "schema": {
              "type": "string",
              "maxLength": 30
            }
          },
          {
            "in": "query",
            "name": "lastName",
            "schema": {
              "type": "string",
              "maxLength": 30
            }
          },
          {
            "in": "query",
            "name": "fullName",
            "schema": {
              "type": "string",
              "maxLength": 100
            }
          },
          {
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string",
              "format": "email",
              "maxLength": 250
            }
          },
          {
            "in": "query",
            "name": "companyId",
            "schema": {
              "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/company"
                }
              ]
            },
            "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 10
            }
          },
          {
            "in": "query",
            "name": "department",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 50
            }
          },
          {
            "in": "query",
            "name": "jobTitle",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 50
            }
          },
          {
            "in": "query",
            "name": "phone",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 15
            }
          },
          {
            "in": "query",
            "name": "extension",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 5
            }
          },
          {
            "in": "query",
            "name": "address1",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 100
            }
          },
          {
            "in": "query",
            "name": "address2",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 100
            }
          },
          {
            "in": "query",
            "name": "city",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 50
            }
          },
          {
            "in": "query",
            "name": "zipcode",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 10
            }
          },
          {
            "in": "query",
            "name": "state",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 50
            }
          },
          {
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 50
            }
          },
          {
            "in": "query",
            "name": "birthDate",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 15
            }
          },
          {
            "in": "query",
            "name": "isDeleted",
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false
            }
          },
          {
            "in": "query",
            "name": "createdBy",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "updatedBy",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Contact** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contact"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Contact** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/contact/destroy/{_id}": {
      "get": {
        "summary": "Delete Contact (destroy) *",
        "description": "Delete the **Contact** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Contact"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-contact"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Contact** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contact"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Contact** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/email/find": {
      "get": {
        "summary": "List Email (find where) *",
        "description": "Find a list of **Email** records that match the specified criteria.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Email"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,title,message,to,from,isCritical,quoteId,contactId,companyId,inventoryId,userId"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,title,message,to,from,isCritical,quoteId,contactId,companyId,inventoryId,userId"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,quoteId,contactId,companyId,inventoryId,userId"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Email** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/email"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/email/find/{_id}": {
      "get": {
        "summary": "Get Email (find one) *",
        "description": "Look up the **Email** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Email"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-email"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,title,message,to,from,isCritical,quoteId,contactId,companyId,inventoryId,userId"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,title,message,to,from,isCritical,quoteId,contactId,companyId,inventoryId,userId"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,quoteId,contactId,companyId,inventoryId,userId"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Email** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/email"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Email** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/email/create": {
      "get": {
        "summary": "Create Email *",
        "description": "Create a new **Email** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Email"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "maxLength": 10
            }
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string",
              "maxLength": 100
            }
          },
          {
            "in": "query",
            "name": "message",
            "schema": {
              "type": "string",
              "maxLength": 5000
            }
          },
          {
            "in": "query",
            "name": "to",
            "schema": {
              "type": "string",
              "maxLength": 5000
            }
          },
          {
            "in": "query",
            "name": "from",
            "schema": {
              "type": "string",
              "maxLength": 5000
            }
          },
          {
            "in": "query",
            "name": "isCritical",
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false
            }
          },
          {
            "in": "query",
            "name": "quoteId",
            "schema": {
              "description": "JSON dictionary representing the **quote** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/quote"
                }
              ]
            },
            "description": "JSON dictionary representing the **quote** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "contactId",
            "schema": {
              "description": "JSON dictionary representing the **contact** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/contact"
                }
              ]
            },
            "description": "JSON dictionary representing the **contact** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "companyId",
            "schema": {
              "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/company"
                }
              ]
            },
            "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "inventoryId",
            "schema": {
              "description": "JSON dictionary representing the **inventory** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/inventory"
                }
              ]
            },
            "description": "JSON dictionary representing the **inventory** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "userId",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Email** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/email"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/email/update/{_id}": {
      "get": {
        "summary": "Update Email *",
        "description": "Update an existing **Email** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Email"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-email"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "maxLength": 10
            }
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string",
              "maxLength": 100
            }
          },
          {
            "in": "query",
            "name": "message",
            "schema": {
              "type": "string",
              "maxLength": 5000
            }
          },
          {
            "in": "query",
            "name": "to",
            "schema": {
              "type": "string",
              "maxLength": 5000
            }
          },
          {
            "in": "query",
            "name": "from",
            "schema": {
              "type": "string",
              "maxLength": 5000
            }
          },
          {
            "in": "query",
            "name": "isCritical",
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false
            }
          },
          {
            "in": "query",
            "name": "quoteId",
            "schema": {
              "description": "JSON dictionary representing the **quote** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/quote"
                }
              ]
            },
            "description": "JSON dictionary representing the **quote** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "contactId",
            "schema": {
              "description": "JSON dictionary representing the **contact** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/contact"
                }
              ]
            },
            "description": "JSON dictionary representing the **contact** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "companyId",
            "schema": {
              "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/company"
                }
              ]
            },
            "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "inventoryId",
            "schema": {
              "description": "JSON dictionary representing the **inventory** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/inventory"
                }
              ]
            },
            "description": "JSON dictionary representing the **inventory** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "userId",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Email** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/email"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Email** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/email/destroy/{_id}": {
      "get": {
        "summary": "Delete Email (destroy) *",
        "description": "Delete the **Email** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Email"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-email"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Email** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/email"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Email** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/equipment/find": {
      "get": {
        "summary": "List Equipment (find where) *",
        "description": "Find a list of **Equipment** records that match the specified criteria.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Equipment"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Equipment** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/equipment"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/equipment/find/{_id}": {
      "get": {
        "summary": "Get Equipment (find one) *",
        "description": "Look up the **Equipment** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Equipment"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-equipment"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Equipment** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/equipment"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Equipment** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/equipment/create": {
      "get": {
        "summary": "Create Equipment *",
        "description": "Create a new **Equipment** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Equipment"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string",
              "maxLength": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Equipment** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/equipment"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/equipment/update/{_id}": {
      "get": {
        "summary": "Update Equipment *",
        "description": "Update an existing **Equipment** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Equipment"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-equipment"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string",
              "maxLength": 30
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Equipment** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/equipment"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Equipment** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/equipment/destroy/{_id}": {
      "get": {
        "summary": "Delete Equipment (destroy) *",
        "description": "Delete the **Equipment** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Equipment"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-equipment"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Equipment** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/equipment"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Equipment** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/inventory/find": {
      "get": {
        "summary": "List Inventory (find where) *",
        "description": "Find a list of **Inventory** records that match the specified criteria.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Inventory"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,packageId,trackingNumber,company,type,deviceType,status,length,width,height,lwhType,weight,weightType,location,notes,createdBy,updatedBy,isDeleted"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,packageId,trackingNumber,company,type,deviceType,status,length,width,height,lwhType,weight,weightType,location,notes,createdBy,updatedBy,isDeleted"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,company,createdBy,updatedBy"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Inventory** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/inventory"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/inventory/find/{_id}": {
      "get": {
        "summary": "Get Inventory (find one) *",
        "description": "Look up the **Inventory** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Inventory"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-inventory"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,packageId,trackingNumber,company,type,deviceType,status,length,width,height,lwhType,weight,weightType,location,notes,createdBy,updatedBy,isDeleted"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,packageId,trackingNumber,company,type,deviceType,status,length,width,height,lwhType,weight,weightType,location,notes,createdBy,updatedBy,isDeleted"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,company,createdBy,updatedBy"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Inventory** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inventory"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Inventory** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/inventory/create": {
      "get": {
        "summary": "Create Inventory *",
        "description": "Create a new **Inventory** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Inventory"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "packageId",
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "in": "query",
            "name": "trackingNumber",
            "schema": {
              "type": "string",
              "maxLength": 50
            },
            "required": true
          },
          {
            "in": "query",
            "name": "company",
            "schema": {
              "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/company"
                }
              ]
            },
            "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "in": "query",
            "name": "deviceType",
            "schema": {
              "type": "string",
              "maxLength": 15
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 10
            }
          },
          {
            "in": "query",
            "name": "length",
            "schema": {
              "type": "number",
              "format": "double",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "width",
            "schema": {
              "type": "number",
              "format": "double",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "height",
            "schema": {
              "type": "number",
              "format": "double",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "lwhType",
            "schema": {
              "type": "string",
              "default": "in",
              "maxLength": 10,
              "example": "in"
            }
          },
          {
            "in": "query",
            "name": "weight",
            "schema": {
              "type": "number",
              "format": "double",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "weightType",
            "schema": {
              "type": "string",
              "default": "lb",
              "maxLength": 10,
              "example": "lb"
            }
          },
          {
            "in": "query",
            "name": "location",
            "schema": {
              "type": "string",
              "maxLength": 254
            }
          },
          {
            "in": "query",
            "name": "notes",
            "schema": {
              "type": "string",
              "maxLength": 254
            }
          },
          {
            "in": "query",
            "name": "createdBy",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "updatedBy",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "isDeleted",
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Inventory** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inventory"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/inventory/update/{_id}": {
      "get": {
        "summary": "Update Inventory *",
        "description": "Update an existing **Inventory** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Inventory"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-inventory"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "packageId",
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "in": "query",
            "name": "trackingNumber",
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "in": "query",
            "name": "company",
            "schema": {
              "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/company"
                }
              ]
            },
            "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "in": "query",
            "name": "deviceType",
            "schema": {
              "type": "string",
              "maxLength": 15
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 10
            }
          },
          {
            "in": "query",
            "name": "length",
            "schema": {
              "type": "number",
              "format": "double",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "width",
            "schema": {
              "type": "number",
              "format": "double",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "height",
            "schema": {
              "type": "number",
              "format": "double",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "lwhType",
            "schema": {
              "type": "string",
              "default": "in",
              "maxLength": 10,
              "example": "in"
            }
          },
          {
            "in": "query",
            "name": "weight",
            "schema": {
              "type": "number",
              "format": "double",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "weightType",
            "schema": {
              "type": "string",
              "default": "lb",
              "maxLength": 10,
              "example": "lb"
            }
          },
          {
            "in": "query",
            "name": "location",
            "schema": {
              "type": "string",
              "maxLength": 254
            }
          },
          {
            "in": "query",
            "name": "notes",
            "schema": {
              "type": "string",
              "maxLength": 254
            }
          },
          {
            "in": "query",
            "name": "createdBy",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "updatedBy",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "isDeleted",
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Inventory** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inventory"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Inventory** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/inventory/destroy/{_id}": {
      "get": {
        "summary": "Delete Inventory (destroy) *",
        "description": "Delete the **Inventory** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Inventory"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-inventory"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Inventory** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inventory"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Inventory** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/note/find": {
      "get": {
        "summary": "List Note (find where) *",
        "description": "Find a list of **Note** records that match the specified criteria.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,title,message,isCritical,quoteId,contactId,companyId,inventoryId,userId"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,title,message,isCritical,quoteId,contactId,companyId,inventoryId,userId"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,quoteId,contactId,companyId,inventoryId,userId"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Note** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/note"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/note/find/{_id}": {
      "get": {
        "summary": "Get Note (find one) *",
        "description": "Look up the **Note** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-note"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,title,message,isCritical,quoteId,contactId,companyId,inventoryId,userId"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,title,message,isCritical,quoteId,contactId,companyId,inventoryId,userId"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,quoteId,contactId,companyId,inventoryId,userId"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Note** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/note"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Note** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/note/create": {
      "get": {
        "summary": "Create Note *",
        "description": "Create a new **Note** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "maxLength": 10
            }
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string",
              "maxLength": 100
            }
          },
          {
            "in": "query",
            "name": "message",
            "schema": {
              "type": "string",
              "maxLength": 5000
            }
          },
          {
            "in": "query",
            "name": "isCritical",
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false
            }
          },
          {
            "in": "query",
            "name": "quoteId",
            "schema": {
              "description": "JSON dictionary representing the **quote** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/quote"
                }
              ]
            },
            "description": "JSON dictionary representing the **quote** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "contactId",
            "schema": {
              "description": "JSON dictionary representing the **contact** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/contact"
                }
              ]
            },
            "description": "JSON dictionary representing the **contact** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "companyId",
            "schema": {
              "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/company"
                }
              ]
            },
            "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "inventoryId",
            "schema": {
              "description": "JSON dictionary representing the **inventory** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/inventory"
                }
              ]
            },
            "description": "JSON dictionary representing the **inventory** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "userId",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Note** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/note"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/note/update/{_id}": {
      "get": {
        "summary": "Update Note *",
        "description": "Update an existing **Note** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-note"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "maxLength": 10
            }
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string",
              "maxLength": 100
            }
          },
          {
            "in": "query",
            "name": "message",
            "schema": {
              "type": "string",
              "maxLength": 5000
            }
          },
          {
            "in": "query",
            "name": "isCritical",
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false
            }
          },
          {
            "in": "query",
            "name": "quoteId",
            "schema": {
              "description": "JSON dictionary representing the **quote** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/quote"
                }
              ]
            },
            "description": "JSON dictionary representing the **quote** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "contactId",
            "schema": {
              "description": "JSON dictionary representing the **contact** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/contact"
                }
              ]
            },
            "description": "JSON dictionary representing the **contact** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "companyId",
            "schema": {
              "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/company"
                }
              ]
            },
            "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "inventoryId",
            "schema": {
              "description": "JSON dictionary representing the **inventory** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/inventory"
                }
              ]
            },
            "description": "JSON dictionary representing the **inventory** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "userId",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Note** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/note"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Note** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/note/destroy/{_id}": {
      "get": {
        "summary": "Delete Note (destroy) *",
        "description": "Delete the **Note** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-note"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Note** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/note"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Note** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/quote/find": {
      "get": {
        "summary": "List Quote (find where) *",
        "description": "Find a list of **Quote** records that match the specified criteria.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Quote"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,quoteNumber,name,service,transportMode,status,totalCost,totalProfit,expiryDate,totalMiles,stops,accessorials,company,contact,createdBy,updatedBy,isDeleted"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,quoteNumber,name,service,transportMode,status,totalCost,totalProfit,expiryDate,totalMiles,stops,accessorials,company,contact,createdBy,updatedBy,isDeleted"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,stops,accessorials,company,contact,createdBy,updatedBy"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Quote** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/quote"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/quote/find/{_id}": {
      "get": {
        "summary": "Get Quote (find one) *",
        "description": "Look up the **Quote** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Quote"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-quote"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,quoteNumber,name,service,transportMode,status,totalCost,totalProfit,expiryDate,totalMiles,stops,accessorials,company,contact,createdBy,updatedBy,isDeleted"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,quoteNumber,name,service,transportMode,status,totalCost,totalProfit,expiryDate,totalMiles,stops,accessorials,company,contact,createdBy,updatedBy,isDeleted"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,stops,accessorials,company,contact,createdBy,updatedBy"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Quote** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quote"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Quote** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/quote/create": {
      "get": {
        "summary": "Create Quote *",
        "description": "Create a new **Quote** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Quote"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "quoteNumber",
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "in": "query",
            "name": "service",
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "in": "query",
            "name": "transportMode",
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 10
            }
          },
          {
            "in": "query",
            "name": "totalCost",
            "schema": {
              "type": "number",
              "format": "double",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "totalProfit",
            "schema": {
              "type": "number",
              "format": "double",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "expiryDate",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "totalMiles",
            "schema": {
              "type": "number",
              "format": "double",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "stops",
            "schema": {
              "description": "Array of **stop**'s or array of FK's when creating / updating / not populated",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/stop"
              }
            },
            "description": "Array of **stop**'s or array of FK's when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "accessorials",
            "schema": {
              "description": "Array of **accessorial**'s or array of FK's when creating / updating / not populated",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/accessorial"
              }
            },
            "description": "Array of **accessorial**'s or array of FK's when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "company",
            "schema": {
              "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/company"
                }
              ]
            },
            "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "contact",
            "schema": {
              "description": "JSON dictionary representing the **contact** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/contact"
                }
              ]
            },
            "description": "JSON dictionary representing the **contact** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "createdBy",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "updatedBy",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "isDeleted",
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Quote** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quote"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/quote/update/{_id}": {
      "get": {
        "summary": "Update Quote *",
        "description": "Update an existing **Quote** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Quote"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-quote"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "quoteNumber",
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "in": "query",
            "name": "service",
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "in": "query",
            "name": "transportMode",
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "nullable": true,
              "maxLength": 10
            }
          },
          {
            "in": "query",
            "name": "totalCost",
            "schema": {
              "type": "number",
              "format": "double",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "totalProfit",
            "schema": {
              "type": "number",
              "format": "double",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "expiryDate",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "totalMiles",
            "schema": {
              "type": "number",
              "format": "double",
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "stops",
            "schema": {
              "description": "Array of **stop**'s or array of FK's when creating / updating / not populated",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/stop"
              }
            },
            "description": "Array of **stop**'s or array of FK's when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "accessorials",
            "schema": {
              "description": "Array of **accessorial**'s or array of FK's when creating / updating / not populated",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/accessorial"
              }
            },
            "description": "Array of **accessorial**'s or array of FK's when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "company",
            "schema": {
              "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/company"
                }
              ]
            },
            "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "contact",
            "schema": {
              "description": "JSON dictionary representing the **contact** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/contact"
                }
              ]
            },
            "description": "JSON dictionary representing the **contact** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "createdBy",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "updatedBy",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "isDeleted",
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Quote** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quote"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Quote** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/quote/destroy/{_id}": {
      "get": {
        "summary": "Delete Quote (destroy) *",
        "description": "Delete the **Quote** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Quote"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-quote"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Quote** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quote"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Quote** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/quote/{_id}/{association}/add/{childid}": {
      "get": {
        "summary": "Add to for Quote *",
        "description": "Add a foreign record to one of this **Quote** record's collections.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/add-to",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/add-to"
        },
        "tags": [
          "Quote"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-quote"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "stops",
                "accessorials"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double",
                  "description": "**Quote** record's foreign key values to use as the replacement for this collection (**stops** association)",
                  "uniqueItems": true
                },
                {
                  "type": "number",
                  "format": "double",
                  "description": "**Quote** record's foreign key values to use as the replacement for this collection (**accessorials** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Quote** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quote"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform add to, **Quote** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/quote/{_id}/{association}/replace": {
      "get": {
        "summary": "Replace for Quote *",
        "description": "Replace all of the child records in one of this **Quote** record's associations.\n\nOnly one of the query parameters, that matches the **association** path parameter, should be specified.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/replace",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/replace"
        },
        "tags": [
          "Quote"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-quote"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "stops",
                "accessorials"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "query",
            "name": "stops",
            "description": "**Quote** record's foreign key values to use as the replacement for this collection (**stops** association)",
            "schema": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "double",
                "description": "**Quote** record's foreign key values to use as the replacement for this collection (**stops** association)",
                "uniqueItems": true
              }
            }
          },
          {
            "in": "query",
            "name": "accessorials",
            "description": "**Quote** record's foreign key values to use as the replacement for this collection (**accessorials** association)",
            "schema": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "double",
                "description": "**Quote** record's foreign key values to use as the replacement for this collection (**accessorials** association)",
                "uniqueItems": true
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Quote** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quote"
                }
              }
            }
          },
          "404": {
            "description": "Cannot replace, **Quote** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/quote/{_id}/{association}/remove/{childid}": {
      "get": {
        "summary": "Remove from for Quote *",
        "description": "Remove a foreign record from one of this **Quote** record's collections.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/remove-from",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/remove-from"
        },
        "tags": [
          "Quote"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-quote"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "stops",
                "accessorials"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double",
                  "description": "**Quote** record's foreign key values to use as the replacement for this collection (**stops** association)",
                  "uniqueItems": true
                },
                {
                  "type": "number",
                  "format": "double",
                  "description": "**Quote** record's foreign key values to use as the replacement for this collection (**accessorials** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Quote** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quote"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform remove from, **Quote** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/stop/find": {
      "get": {
        "summary": "List Stop (find where) *",
        "description": "Find a list of **Stop** records that match the specified criteria.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Stop"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,city,zipcode,state,country,miles,quoteId"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,city,zipcode,state,country,miles,quoteId"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,quoteId"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Stop** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/stop"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/stop/find/{_id}": {
      "get": {
        "summary": "Get Stop (find one) *",
        "description": "Look up the **Stop** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Stop"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-stop"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,city,zipcode,state,country,miles,quoteId"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,city,zipcode,state,country,miles,quoteId"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,quoteId"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Stop** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stop"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Stop** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/stop/create": {
      "get": {
        "summary": "Create Stop *",
        "description": "Create a new **Stop** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Stop"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "maxLength": 10
            }
          },
          {
            "in": "query",
            "name": "city",
            "schema": {
              "type": "string",
              "maxLength": 20
            }
          },
          {
            "in": "query",
            "name": "zipcode",
            "schema": {
              "type": "string",
              "maxLength": 10
            }
          },
          {
            "in": "query",
            "name": "state",
            "schema": {
              "type": "string",
              "maxLength": 20
            }
          },
          {
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "maxLength": 20
            }
          },
          {
            "in": "query",
            "name": "miles",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "quoteId",
            "schema": {
              "description": "JSON dictionary representing the **quote** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/quote"
                }
              ]
            },
            "description": "JSON dictionary representing the **quote** instance or FK when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Stop** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stop"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/stop/update/{_id}": {
      "get": {
        "summary": "Update Stop *",
        "description": "Update an existing **Stop** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Stop"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-stop"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "maxLength": 10
            }
          },
          {
            "in": "query",
            "name": "city",
            "schema": {
              "type": "string",
              "maxLength": 20
            }
          },
          {
            "in": "query",
            "name": "zipcode",
            "schema": {
              "type": "string",
              "maxLength": 10
            }
          },
          {
            "in": "query",
            "name": "state",
            "schema": {
              "type": "string",
              "maxLength": 20
            }
          },
          {
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "maxLength": 20
            }
          },
          {
            "in": "query",
            "name": "miles",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "quoteId",
            "schema": {
              "description": "JSON dictionary representing the **quote** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/quote"
                }
              ]
            },
            "description": "JSON dictionary representing the **quote** instance or FK when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Stop** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stop"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Stop** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/stop/destroy/{_id}": {
      "get": {
        "summary": "Delete Stop (destroy) *",
        "description": "Delete the **Stop** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Stop"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-stop"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Stop** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stop"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Stop** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/task/find": {
      "get": {
        "summary": "List Task (find where) *",
        "description": "Find a list of **Task** records that match the specified criteria.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,subject,description,priority,dueDateTime,reminderDateTime,category,status,assignedTo,pointOfContact,quoteId,companyId,inventoryId,userId"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,subject,description,priority,dueDateTime,reminderDateTime,category,status,assignedTo,pointOfContact,quoteId,companyId,inventoryId,userId"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,assignedTo,pointOfContact,quoteId,companyId,inventoryId,userId"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Task** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/task"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/task/find/{_id}": {
      "get": {
        "summary": "Get Task (find one) *",
        "description": "Look up the **Task** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-task"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,subject,description,priority,dueDateTime,reminderDateTime,category,status,assignedTo,pointOfContact,quoteId,companyId,inventoryId,userId"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,subject,description,priority,dueDateTime,reminderDateTime,category,status,assignedTo,pointOfContact,quoteId,companyId,inventoryId,userId"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,assignedTo,pointOfContact,quoteId,companyId,inventoryId,userId"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Task** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/task"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Task** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/task/create": {
      "get": {
        "summary": "Create Task *",
        "description": "Create a new **Task** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "maxLength": 10
            }
          },
          {
            "in": "query",
            "name": "subject",
            "schema": {
              "type": "string",
              "maxLength": 100
            }
          },
          {
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string",
              "maxLength": 5000
            }
          },
          {
            "in": "query",
            "name": "priority",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dueDateTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "reminderDateTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "assignedTo",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "pointOfContact",
            "schema": {
              "description": "JSON dictionary representing the **contact** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/contact"
                }
              ]
            },
            "description": "JSON dictionary representing the **contact** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "quoteId",
            "schema": {
              "description": "JSON dictionary representing the **quote** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/quote"
                }
              ]
            },
            "description": "JSON dictionary representing the **quote** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "companyId",
            "schema": {
              "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/company"
                }
              ]
            },
            "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "inventoryId",
            "schema": {
              "description": "JSON dictionary representing the **inventory** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/inventory"
                }
              ]
            },
            "description": "JSON dictionary representing the **inventory** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "userId",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Task** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/task"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/task/update/{_id}": {
      "get": {
        "summary": "Update Task *",
        "description": "Update an existing **Task** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-task"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "maxLength": 10
            }
          },
          {
            "in": "query",
            "name": "subject",
            "schema": {
              "type": "string",
              "maxLength": 100
            }
          },
          {
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string",
              "maxLength": 5000
            }
          },
          {
            "in": "query",
            "name": "priority",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dueDateTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "reminderDateTime",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "assignedTo",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "pointOfContact",
            "schema": {
              "description": "JSON dictionary representing the **contact** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/contact"
                }
              ]
            },
            "description": "JSON dictionary representing the **contact** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "quoteId",
            "schema": {
              "description": "JSON dictionary representing the **quote** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/quote"
                }
              ]
            },
            "description": "JSON dictionary representing the **quote** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "companyId",
            "schema": {
              "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/company"
                }
              ]
            },
            "description": "JSON dictionary representing the **company** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "inventoryId",
            "schema": {
              "description": "JSON dictionary representing the **inventory** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/inventory"
                }
              ]
            },
            "description": "JSON dictionary representing the **inventory** instance or FK when creating / updating / not populated"
          },
          {
            "in": "query",
            "name": "userId",
            "schema": {
              "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/user"
                }
              ]
            },
            "description": "JSON dictionary representing the **user** instance or FK when creating / updating / not populated"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Task** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/task"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Task** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/task/destroy/{_id}": {
      "get": {
        "summary": "Delete Task (destroy) *",
        "description": "Delete the **Task** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-task"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Task** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/task"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Task** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/user/find": {
      "get": {
        "summary": "List User (find where) *",
        "description": "Find a list of **User** records that match the specified criteria.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,email,password,firstName,lastName,fullName,isSuperAdmin,isAdmin,passwordResetToken,passwordResetTokenExpiresAt,emailProofToken,emailProofTokenExpiresAt,userImage,jobTitle,department,location,phoneNumber,extension"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,email,password,firstName,lastName,fullName,isSuperAdmin,isAdmin,passwordResetToken,passwordResetTokenExpiresAt,emailProofToken,emailProofTokenExpiresAt,userImage,jobTitle,department,location,phoneNumber,extension"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **User** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/user/find/{_id}": {
      "get": {
        "summary": "Get User (find one) *",
        "description": "Look up the **User** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-user"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,email,password,firstName,lastName,fullName,isSuperAdmin,isAdmin,passwordResetToken,passwordResetTokenExpiresAt,emailProofToken,emailProofTokenExpiresAt,userImage,jobTitle,department,location,phoneNumber,extension"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,email,password,firstName,lastName,fullName,isSuperAdmin,isAdmin,passwordResetToken,passwordResetTokenExpiresAt,emailProofToken,emailProofTokenExpiresAt,userImage,jobTitle,department,location,phoneNumber,extension"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **User** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **User** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/user/create": {
      "get": {
        "summary": "Create User *",
        "description": "Create a new **User** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string",
              "format": "email",
              "maxLength": 200,
              "uniqueItems": true
            },
            "required": true
          },
          {
            "in": "query",
            "name": "password",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "firstName",
            "schema": {
              "type": "string",
              "maxLength": 120
            },
            "required": true
          },
          {
            "in": "query",
            "name": "lastName",
            "schema": {
              "type": "string",
              "maxLength": 120
            },
            "required": true
          },
          {
            "in": "query",
            "name": "fullName",
            "schema": {
              "type": "string",
              "maxLength": 255
            }
          },
          {
            "in": "query",
            "name": "isSuperAdmin",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "isAdmin",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "passwordResetToken",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "passwordResetTokenExpiresAt",
            "schema": {
              "type": "number",
              "format": "double",
              "example": 1502844074211
            }
          },
          {
            "in": "query",
            "name": "emailProofToken",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "emailProofTokenExpiresAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "userImage",
            "schema": {
              "type": "string",
              "maxLength": 255
            }
          },
          {
            "in": "query",
            "name": "jobTitle",
            "schema": {
              "type": "string",
              "maxLength": 100
            }
          },
          {
            "in": "query",
            "name": "department",
            "schema": {
              "type": "string",
              "maxLength": 100
            }
          },
          {
            "in": "query",
            "name": "location",
            "schema": {
              "type": "string",
              "maxLength": 100
            }
          },
          {
            "in": "query",
            "name": "phoneNumber",
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "in": "query",
            "name": "extension",
            "schema": {
              "type": "string",
              "maxLength": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **User** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/user/update/{_id}": {
      "get": {
        "summary": "Update User *",
        "description": "Update an existing **User** record.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-user"
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "integer",
              "format": "int64",
              "uniqueItems": true,
              "description": "Note Sails special attributes: autoIncrement"
            },
            "description": "Note Sails special attributes: autoIncrement"
          },
          {
            "in": "query",
            "name": "createdAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "updatedAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string",
              "format": "email",
              "maxLength": 200,
              "uniqueItems": true
            }
          },
          {
            "in": "query",
            "name": "password",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "firstName",
            "schema": {
              "type": "string",
              "maxLength": 120
            }
          },
          {
            "in": "query",
            "name": "lastName",
            "schema": {
              "type": "string",
              "maxLength": 120
            }
          },
          {
            "in": "query",
            "name": "fullName",
            "schema": {
              "type": "string",
              "maxLength": 255
            }
          },
          {
            "in": "query",
            "name": "isSuperAdmin",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "isAdmin",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "passwordResetToken",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "passwordResetTokenExpiresAt",
            "schema": {
              "type": "number",
              "format": "double",
              "example": 1502844074211
            }
          },
          {
            "in": "query",
            "name": "emailProofToken",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "emailProofTokenExpiresAt",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "in": "query",
            "name": "userImage",
            "schema": {
              "type": "string",
              "maxLength": 255
            }
          },
          {
            "in": "query",
            "name": "jobTitle",
            "schema": {
              "type": "string",
              "maxLength": 100
            }
          },
          {
            "in": "query",
            "name": "department",
            "schema": {
              "type": "string",
              "maxLength": 100
            }
          },
          {
            "in": "query",
            "name": "location",
            "schema": {
              "type": "string",
              "maxLength": 100
            }
          },
          {
            "in": "query",
            "name": "phoneNumber",
            "schema": {
              "type": "string",
              "maxLength": 50
            }
          },
          {
            "in": "query",
            "name": "extension",
            "schema": {
              "type": "string",
              "maxLength": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **User** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **User** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/user/destroy/{_id}": {
      "get": {
        "summary": "Delete User (destroy) *",
        "description": "Delete the **User** record with the specified ID.\n\n(\\*) Note that this is a [Sails blueprint shortcut route](https://sailsjs.com/documentation/concepts/blueprints/blueprint-routes#?shortcut-blueprint-routes) (recommended for **development-mode only**)",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-user"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **User** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **User** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/accessorial": {
      "get": {
        "summary": "List Accessorial (find where)",
        "description": "Find a list of **Accessorial** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Accessorial"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name,quantity,rate,totalRate,isIncludeInCharges,description,quoteId"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name,quantity,rate,totalRate,isIncludeInCharges,description,quoteId"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,quoteId"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Accessorial** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/accessorial"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create Accessorial",
        "description": "Create a new **Accessorial** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Accessorial"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Accessorial** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/accessorial"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Accessorial instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/accessorial"
              }
            }
          }
        }
      }
    },
    "/accessorial/{_id}": {
      "get": {
        "summary": "Get Accessorial (find one)",
        "description": "Look up the **Accessorial** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Accessorial"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-accessorial"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name,quantity,rate,totalRate,isIncludeInCharges,description,quoteId"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name,quantity,rate,totalRate,isIncludeInCharges,description,quoteId"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,quoteId"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Accessorial** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/accessorial"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Accessorial** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update Accessorial",
        "description": "Update an existing **Accessorial** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Accessorial"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-accessorial"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Accessorial** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/accessorial"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Accessorial** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Accessorial instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/accessorial-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Accessorial (destroy)",
        "description": "Delete the **Accessorial** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Accessorial"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-accessorial"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Accessorial** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/accessorial"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Accessorial** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/accessorial/{_id}/{association}": {
      "get": {
        "summary": "Populate association for Accessorial",
        "description": "Populate and return foreign record(s) for the given association of this **Accessorial** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/populate-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/populate-where"
        },
        "tags": [
          "Accessorial"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-accessorial"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "quoteId"
              ]
            },
            "description": "The name of the association"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name,quantity,rate,totalRate,isIncludeInCharges,description,quoteId"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name,quantity,rate,totalRate,isIncludeInCharges,description,quoteId"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the list of associated records as JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/quote"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Cannot populate, **Accessorial** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/cargodetail": {
      "get": {
        "summary": "List CargoDetail (find where)",
        "description": "Find a list of **CargoDetail** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "CargoDetail"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,equipmentId,commodityId,weight,cargoValue,temperature,pieces,isHazmat,hazmatName,hazmatClass,hazmatUN,status,comments,cargoTypeId,quoteId,createdBy,updatedBy,isDeleted"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,equipmentId,commodityId,weight,cargoValue,temperature,pieces,isHazmat,hazmatName,hazmatClass,hazmatUN,status,comments,cargoTypeId,quoteId,createdBy,updatedBy,isDeleted"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,equipmentId,commodityId,cargoTypeId,quoteId,createdBy,updatedBy"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **CargoDetail** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/cargodetail"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create CargoDetail",
        "description": "Create a new **CargoDetail** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "CargoDetail"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **CargoDetail** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cargodetail"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the CargoDetail instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cargodetail"
              }
            }
          }
        }
      }
    },
    "/cargodetail/{_id}": {
      "get": {
        "summary": "Get CargoDetail (find one)",
        "description": "Look up the **CargoDetail** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "CargoDetail"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-cargodetail"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,equipmentId,commodityId,weight,cargoValue,temperature,pieces,isHazmat,hazmatName,hazmatClass,hazmatUN,status,comments,cargoTypeId,quoteId,createdBy,updatedBy,isDeleted"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,equipmentId,commodityId,weight,cargoValue,temperature,pieces,isHazmat,hazmatName,hazmatClass,hazmatUN,status,comments,cargoTypeId,quoteId,createdBy,updatedBy,isDeleted"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,equipmentId,commodityId,cargoTypeId,quoteId,createdBy,updatedBy"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **CargoDetail** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cargodetail"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **CargoDetail** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update CargoDetail",
        "description": "Update an existing **CargoDetail** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "CargoDetail"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-cargodetail"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **CargoDetail** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cargodetail"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **CargoDetail** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the CargoDetail instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cargodetail-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete CargoDetail (destroy)",
        "description": "Delete the **CargoDetail** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "CargoDetail"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-cargodetail"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **CargoDetail** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cargodetail"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **CargoDetail** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/cargodetail/{_id}/{association}": {
      "get": {
        "summary": "Populate association for CargoDetail",
        "description": "Populate and return foreign record(s) for the given association of this **CargoDetail** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/populate-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/populate-where"
        },
        "tags": [
          "CargoDetail"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-cargodetail"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "equipmentId",
                "commodityId",
                "cargoTypeId",
                "quoteId",
                "createdBy",
                "updatedBy"
              ]
            },
            "description": "The name of the association"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,equipmentId,commodityId,weight,cargoValue,temperature,pieces,isHazmat,hazmatName,hazmatClass,hazmatUN,status,comments,cargoTypeId,quoteId,createdBy,updatedBy,isDeleted"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,equipmentId,commodityId,weight,cargoValue,temperature,pieces,isHazmat,hazmatName,hazmatClass,hazmatUN,status,comments,cargoTypeId,quoteId,createdBy,updatedBy,isDeleted"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the list of associated records as JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/equipment"
                      },
                      {
                        "$ref": "#/components/schemas/commodity"
                      },
                      {
                        "$ref": "#/components/schemas/cargotype"
                      },
                      {
                        "$ref": "#/components/schemas/quote"
                      },
                      {
                        "$ref": "#/components/schemas/user"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Cannot populate, **CargoDetail** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/cargotype": {
      "get": {
        "summary": "List CargoType (find where)",
        "description": "Find a list of **CargoType** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "CargoType"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **CargoType** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/cargotype"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create CargoType",
        "description": "Create a new **CargoType** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "CargoType"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **CargoType** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cargotype"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the CargoType instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cargotype"
              }
            }
          }
        }
      }
    },
    "/cargotype/{_id}": {
      "get": {
        "summary": "Get CargoType (find one)",
        "description": "Look up the **CargoType** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "CargoType"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-cargotype"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **CargoType** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cargotype"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **CargoType** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update CargoType",
        "description": "Update an existing **CargoType** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "CargoType"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-cargotype"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **CargoType** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cargotype"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **CargoType** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the CargoType instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cargotype-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete CargoType (destroy)",
        "description": "Delete the **CargoType** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "CargoType"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-cargotype"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **CargoType** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cargotype"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **CargoType** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/commodity": {
      "get": {
        "summary": "List Commodity (find where)",
        "description": "Find a list of **Commodity** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Commodity"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Commodity** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/commodity"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create Commodity",
        "description": "Create a new **Commodity** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Commodity"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Commodity** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/commodity"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Commodity instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/commodity"
              }
            }
          }
        }
      }
    },
    "/commodity/{_id}": {
      "get": {
        "summary": "Get Commodity (find one)",
        "description": "Look up the **Commodity** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Commodity"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-commodity"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Commodity** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/commodity"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Commodity** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update Commodity",
        "description": "Update an existing **Commodity** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Commodity"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-commodity"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Commodity** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/commodity"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Commodity** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Commodity instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/commodity-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Commodity (destroy)",
        "description": "Delete the **Commodity** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Commodity"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-commodity"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Commodity** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/commodity"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Commodity** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/company": {
      "get": {
        "summary": "List Company (find where)",
        "description": "Find a list of **Company** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name,email,type,status,phone,extension,address1,address2,city,zipcode,state,country,employeesCount,revenue,mainContact,createdBy,updatedBy,isDeleted,contacts"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name,email,type,status,phone,extension,address1,address2,city,zipcode,state,country,employeesCount,revenue,mainContact,createdBy,updatedBy,isDeleted,contacts"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,mainContact,createdBy,updatedBy,contacts"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Company** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/company"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create Company",
        "description": "Create a new **Company** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Company"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Company** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/company"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Company instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/company"
              }
            }
          }
        }
      }
    },
    "/company/{_id}": {
      "get": {
        "summary": "Get Company (find one)",
        "description": "Look up the **Company** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-company"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name,email,type,status,phone,extension,address1,address2,city,zipcode,state,country,employeesCount,revenue,mainContact,createdBy,updatedBy,isDeleted,contacts"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name,email,type,status,phone,extension,address1,address2,city,zipcode,state,country,employeesCount,revenue,mainContact,createdBy,updatedBy,isDeleted,contacts"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,mainContact,createdBy,updatedBy,contacts"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Company** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/company"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Company** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update Company",
        "description": "Update an existing **Company** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-company"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Company** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/company"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Company** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Company instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/company-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Company (destroy)",
        "description": "Delete the **Company** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-company"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Company** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/company"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Company** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/company/{_id}/{association}/{childid}": {
      "put": {
        "summary": "Add to for Company",
        "description": "Add a foreign record to one of this **Company** record's collections.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/add-to",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/add-to"
        },
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-company"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "contacts"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double",
                  "description": "**Company** record's foreign key values to use as the replacement for this collection (**contacts** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Company** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/company"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform add to, **Company** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Remove from for Company",
        "description": "Remove a foreign record from one of this **Company** record's collections.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/remove-from",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/remove-from"
        },
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-company"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "contacts"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double",
                  "description": "**Company** record's foreign key values to use as the replacement for this collection (**contacts** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Company** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/company"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform remove from, **Company** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/company/{_id}/{association}": {
      "put": {
        "summary": "Replace for Company",
        "description": "Replace all of the child records in one of this **Company** record's associations.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/replace",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/replace"
        },
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-company"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "contacts"
              ]
            },
            "description": "The name of the association"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Company** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/company"
                }
              }
            }
          },
          "404": {
            "description": "Cannot replace, **Company** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "The primary key values (usually IDs) of the child records to use as the new members of this collection",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "number",
                      "format": "double",
                      "description": "**Company** record's foreign key values to use as the replacement for this collection (**contacts** association)",
                      "uniqueItems": true
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Populate association for Company",
        "description": "Populate and return foreign record(s) for the given association of this **Company** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/populate-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/populate-where"
        },
        "tags": [
          "Company"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-company"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "mainContact",
                "createdBy",
                "updatedBy",
                "contacts"
              ]
            },
            "description": "The name of the association"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name,email,type,status,phone,extension,address1,address2,city,zipcode,state,country,employeesCount,revenue,mainContact,createdBy,updatedBy,isDeleted,contacts"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name,email,type,status,phone,extension,address1,address2,city,zipcode,state,country,employeesCount,revenue,mainContact,createdBy,updatedBy,isDeleted,contacts"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the list of associated records as JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/contact"
                      },
                      {
                        "$ref": "#/components/schemas/user"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Cannot populate, **Company** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/contact": {
      "get": {
        "summary": "List Contact (find where)",
        "description": "Find a list of **Contact** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Contact"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,firstName,lastName,fullName,email,companyId,status,department,jobTitle,phone,extension,address1,address2,city,zipcode,state,country,birthDate,isDeleted,createdBy,updatedBy"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,firstName,lastName,fullName,email,companyId,status,department,jobTitle,phone,extension,address1,address2,city,zipcode,state,country,birthDate,isDeleted,createdBy,updatedBy"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,companyId,createdBy,updatedBy"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Contact** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/contact"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create Contact",
        "description": "Create a new **Contact** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Contact"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Contact** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contact"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Contact instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/contact"
              }
            }
          }
        }
      }
    },
    "/contact/{_id}": {
      "get": {
        "summary": "Get Contact (find one)",
        "description": "Look up the **Contact** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Contact"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-contact"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,firstName,lastName,fullName,email,companyId,status,department,jobTitle,phone,extension,address1,address2,city,zipcode,state,country,birthDate,isDeleted,createdBy,updatedBy"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,firstName,lastName,fullName,email,companyId,status,department,jobTitle,phone,extension,address1,address2,city,zipcode,state,country,birthDate,isDeleted,createdBy,updatedBy"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,companyId,createdBy,updatedBy"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Contact** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contact"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Contact** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update Contact",
        "description": "Update an existing **Contact** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Contact"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-contact"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Contact** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contact"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Contact** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Contact instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/contact-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Contact (destroy)",
        "description": "Delete the **Contact** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Contact"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-contact"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Contact** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contact"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Contact** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/contact/{_id}/{association}": {
      "get": {
        "summary": "Populate association for Contact",
        "description": "Populate and return foreign record(s) for the given association of this **Contact** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/populate-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/populate-where"
        },
        "tags": [
          "Contact"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-contact"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "companyId",
                "createdBy",
                "updatedBy"
              ]
            },
            "description": "The name of the association"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,firstName,lastName,fullName,email,companyId,status,department,jobTitle,phone,extension,address1,address2,city,zipcode,state,country,birthDate,isDeleted,createdBy,updatedBy"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,firstName,lastName,fullName,email,companyId,status,department,jobTitle,phone,extension,address1,address2,city,zipcode,state,country,birthDate,isDeleted,createdBy,updatedBy"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the list of associated records as JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/company"
                      },
                      {
                        "$ref": "#/components/schemas/user"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Cannot populate, **Contact** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/email": {
      "get": {
        "summary": "List Email (find where)",
        "description": "Find a list of **Email** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Email"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,title,message,to,from,isCritical,quoteId,contactId,companyId,inventoryId,userId"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,title,message,to,from,isCritical,quoteId,contactId,companyId,inventoryId,userId"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,quoteId,contactId,companyId,inventoryId,userId"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Email** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/email"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create Email",
        "description": "Create a new **Email** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Email"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Email** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/email"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Email instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/email"
              }
            }
          }
        }
      }
    },
    "/email/{_id}": {
      "get": {
        "summary": "Get Email (find one)",
        "description": "Look up the **Email** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Email"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-email"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,title,message,to,from,isCritical,quoteId,contactId,companyId,inventoryId,userId"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,title,message,to,from,isCritical,quoteId,contactId,companyId,inventoryId,userId"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,quoteId,contactId,companyId,inventoryId,userId"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Email** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/email"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Email** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update Email",
        "description": "Update an existing **Email** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Email"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-email"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Email** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/email"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Email** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Email instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/email-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Email (destroy)",
        "description": "Delete the **Email** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Email"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-email"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Email** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/email"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Email** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/email/{_id}/{association}": {
      "get": {
        "summary": "Populate association for Email",
        "description": "Populate and return foreign record(s) for the given association of this **Email** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/populate-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/populate-where"
        },
        "tags": [
          "Email"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-email"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "quoteId",
                "contactId",
                "companyId",
                "inventoryId",
                "userId"
              ]
            },
            "description": "The name of the association"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,title,message,to,from,isCritical,quoteId,contactId,companyId,inventoryId,userId"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,title,message,to,from,isCritical,quoteId,contactId,companyId,inventoryId,userId"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the list of associated records as JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/quote"
                      },
                      {
                        "$ref": "#/components/schemas/contact"
                      },
                      {
                        "$ref": "#/components/schemas/company"
                      },
                      {
                        "$ref": "#/components/schemas/inventory"
                      },
                      {
                        "$ref": "#/components/schemas/user"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Cannot populate, **Email** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/equipment": {
      "get": {
        "summary": "List Equipment (find where)",
        "description": "Find a list of **Equipment** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Equipment"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Equipment** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/equipment"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create Equipment",
        "description": "Create a new **Equipment** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Equipment"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Equipment** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/equipment"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Equipment instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/equipment"
              }
            }
          }
        }
      }
    },
    "/equipment/{_id}": {
      "get": {
        "summary": "Get Equipment (find one)",
        "description": "Look up the **Equipment** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Equipment"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-equipment"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,name"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Equipment** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/equipment"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Equipment** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update Equipment",
        "description": "Update an existing **Equipment** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Equipment"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-equipment"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Equipment** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/equipment"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Equipment** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Equipment instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/equipment-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Equipment (destroy)",
        "description": "Delete the **Equipment** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Equipment"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-equipment"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Equipment** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/equipment"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Equipment** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/inventory": {
      "get": {
        "summary": "List Inventory (find where)",
        "description": "Find a list of **Inventory** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Inventory"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,packageId,trackingNumber,company,type,deviceType,status,length,width,height,lwhType,weight,weightType,location,notes,createdBy,updatedBy,isDeleted"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,packageId,trackingNumber,company,type,deviceType,status,length,width,height,lwhType,weight,weightType,location,notes,createdBy,updatedBy,isDeleted"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,company,createdBy,updatedBy"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Inventory** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/inventory"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create Inventory",
        "description": "Create a new **Inventory** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Inventory"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Inventory** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inventory"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Inventory instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/inventory"
              }
            }
          }
        }
      }
    },
    "/inventory/{_id}": {
      "get": {
        "summary": "Get Inventory (find one)",
        "description": "Look up the **Inventory** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Inventory"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-inventory"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,packageId,trackingNumber,company,type,deviceType,status,length,width,height,lwhType,weight,weightType,location,notes,createdBy,updatedBy,isDeleted"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,packageId,trackingNumber,company,type,deviceType,status,length,width,height,lwhType,weight,weightType,location,notes,createdBy,updatedBy,isDeleted"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,company,createdBy,updatedBy"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Inventory** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inventory"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Inventory** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update Inventory",
        "description": "Update an existing **Inventory** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Inventory"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-inventory"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Inventory** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inventory"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Inventory** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Inventory instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/inventory-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Inventory (destroy)",
        "description": "Delete the **Inventory** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Inventory"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-inventory"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Inventory** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inventory"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Inventory** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/inventory/{_id}/{association}": {
      "get": {
        "summary": "Populate association for Inventory",
        "description": "Populate and return foreign record(s) for the given association of this **Inventory** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/populate-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/populate-where"
        },
        "tags": [
          "Inventory"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-inventory"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "company",
                "createdBy",
                "updatedBy"
              ]
            },
            "description": "The name of the association"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,packageId,trackingNumber,company,type,deviceType,status,length,width,height,lwhType,weight,weightType,location,notes,createdBy,updatedBy,isDeleted"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,packageId,trackingNumber,company,type,deviceType,status,length,width,height,lwhType,weight,weightType,location,notes,createdBy,updatedBy,isDeleted"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the list of associated records as JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/company"
                      },
                      {
                        "$ref": "#/components/schemas/user"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Cannot populate, **Inventory** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/note": {
      "get": {
        "summary": "List Note (find where)",
        "description": "Find a list of **Note** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,title,message,isCritical,quoteId,contactId,companyId,inventoryId,userId"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,title,message,isCritical,quoteId,contactId,companyId,inventoryId,userId"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,quoteId,contactId,companyId,inventoryId,userId"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Note** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/note"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create Note",
        "description": "Create a new **Note** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Note"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Note** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/note"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Note instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/note"
              }
            }
          }
        }
      }
    },
    "/note/{_id}": {
      "get": {
        "summary": "Get Note (find one)",
        "description": "Look up the **Note** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-note"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,title,message,isCritical,quoteId,contactId,companyId,inventoryId,userId"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,title,message,isCritical,quoteId,contactId,companyId,inventoryId,userId"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,quoteId,contactId,companyId,inventoryId,userId"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Note** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/note"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Note** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update Note",
        "description": "Update an existing **Note** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-note"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Note** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/note"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Note** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Note instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/note-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Note (destroy)",
        "description": "Delete the **Note** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-note"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Note** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/note"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Note** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/note/{_id}/{association}": {
      "get": {
        "summary": "Populate association for Note",
        "description": "Populate and return foreign record(s) for the given association of this **Note** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/populate-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/populate-where"
        },
        "tags": [
          "Note"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-note"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "quoteId",
                "contactId",
                "companyId",
                "inventoryId",
                "userId"
              ]
            },
            "description": "The name of the association"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,title,message,isCritical,quoteId,contactId,companyId,inventoryId,userId"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,title,message,isCritical,quoteId,contactId,companyId,inventoryId,userId"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the list of associated records as JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/quote"
                      },
                      {
                        "$ref": "#/components/schemas/contact"
                      },
                      {
                        "$ref": "#/components/schemas/company"
                      },
                      {
                        "$ref": "#/components/schemas/inventory"
                      },
                      {
                        "$ref": "#/components/schemas/user"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Cannot populate, **Note** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/quote": {
      "get": {
        "summary": "List Quote (find where)",
        "description": "Find a list of **Quote** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Quote"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,quoteNumber,name,service,transportMode,status,totalCost,totalProfit,expiryDate,totalMiles,stops,accessorials,company,contact,createdBy,updatedBy,isDeleted"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,quoteNumber,name,service,transportMode,status,totalCost,totalProfit,expiryDate,totalMiles,stops,accessorials,company,contact,createdBy,updatedBy,isDeleted"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,stops,accessorials,company,contact,createdBy,updatedBy"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Quote** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/quote"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create Quote",
        "description": "Create a new **Quote** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Quote"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Quote** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quote"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Quote instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/quote"
              }
            }
          }
        }
      }
    },
    "/quote/{_id}": {
      "get": {
        "summary": "Get Quote (find one)",
        "description": "Look up the **Quote** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Quote"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-quote"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,quoteNumber,name,service,transportMode,status,totalCost,totalProfit,expiryDate,totalMiles,stops,accessorials,company,contact,createdBy,updatedBy,isDeleted"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,quoteNumber,name,service,transportMode,status,totalCost,totalProfit,expiryDate,totalMiles,stops,accessorials,company,contact,createdBy,updatedBy,isDeleted"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,stops,accessorials,company,contact,createdBy,updatedBy"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Quote** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quote"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Quote** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update Quote",
        "description": "Update an existing **Quote** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Quote"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-quote"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Quote** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quote"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Quote** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Quote instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/quote-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Quote (destroy)",
        "description": "Delete the **Quote** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Quote"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-quote"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Quote** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quote"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Quote** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/quote/{_id}/{association}/{childid}": {
      "put": {
        "summary": "Add to for Quote",
        "description": "Add a foreign record to one of this **Quote** record's collections.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/add-to",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/add-to"
        },
        "tags": [
          "Quote"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-quote"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "stops",
                "accessorials"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double",
                  "description": "**Quote** record's foreign key values to use as the replacement for this collection (**stops** association)",
                  "uniqueItems": true
                },
                {
                  "type": "number",
                  "format": "double",
                  "description": "**Quote** record's foreign key values to use as the replacement for this collection (**accessorials** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Quote** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quote"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform add to, **Quote** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Remove from for Quote",
        "description": "Remove a foreign record from one of this **Quote** record's collections.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/remove-from",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/remove-from"
        },
        "tags": [
          "Quote"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-quote"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "stops",
                "accessorials"
              ]
            },
            "description": "The name of the association"
          },
          {
            "in": "path",
            "name": "childid",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "number",
                  "format": "double",
                  "description": "**Quote** record's foreign key values to use as the replacement for this collection (**stops** association)",
                  "uniqueItems": true
                },
                {
                  "type": "number",
                  "format": "double",
                  "description": "**Quote** record's foreign key values to use as the replacement for this collection (**accessorials** association)",
                  "uniqueItems": true
                }
              ]
            },
            "description": "The desired target association record's foreign key value"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Quote** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quote"
                }
              }
            }
          },
          "404": {
            "description": "Cannot perform remove from, **Quote** record OR **FK record** with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/quote/{_id}/{association}": {
      "put": {
        "summary": "Replace for Quote",
        "description": "Replace all of the child records in one of this **Quote** record's associations.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/replace",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/replace"
        },
        "tags": [
          "Quote"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-quote"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "stops",
                "accessorials"
              ]
            },
            "description": "The name of the association"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Quote** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quote"
                }
              }
            }
          },
          "404": {
            "description": "Cannot replace, **Quote** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "The primary key values (usually IDs) of the child records to use as the new members of this collection",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "type": "number",
                      "format": "double",
                      "description": "**Quote** record's foreign key values to use as the replacement for this collection (**stops** association)",
                      "uniqueItems": true
                    },
                    {
                      "type": "number",
                      "format": "double",
                      "description": "**Quote** record's foreign key values to use as the replacement for this collection (**accessorials** association)",
                      "uniqueItems": true
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Populate association for Quote",
        "description": "Populate and return foreign record(s) for the given association of this **Quote** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/populate-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/populate-where"
        },
        "tags": [
          "Quote"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-quote"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "stops",
                "accessorials",
                "company",
                "contact",
                "createdBy",
                "updatedBy"
              ]
            },
            "description": "The name of the association"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,quoteNumber,name,service,transportMode,status,totalCost,totalProfit,expiryDate,totalMiles,stops,accessorials,company,contact,createdBy,updatedBy,isDeleted"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,quoteNumber,name,service,transportMode,status,totalCost,totalProfit,expiryDate,totalMiles,stops,accessorials,company,contact,createdBy,updatedBy,isDeleted"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the list of associated records as JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/stop"
                      },
                      {
                        "$ref": "#/components/schemas/accessorial"
                      },
                      {
                        "$ref": "#/components/schemas/company"
                      },
                      {
                        "$ref": "#/components/schemas/contact"
                      },
                      {
                        "$ref": "#/components/schemas/user"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Cannot populate, **Quote** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/stop": {
      "get": {
        "summary": "List Stop (find where)",
        "description": "Find a list of **Stop** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Stop"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,city,zipcode,state,country,miles,quoteId"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,city,zipcode,state,country,miles,quoteId"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,quoteId"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Stop** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/stop"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create Stop",
        "description": "Create a new **Stop** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Stop"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Stop** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stop"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Stop instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/stop"
              }
            }
          }
        }
      }
    },
    "/stop/{_id}": {
      "get": {
        "summary": "Get Stop (find one)",
        "description": "Look up the **Stop** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Stop"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-stop"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,city,zipcode,state,country,miles,quoteId"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,city,zipcode,state,country,miles,quoteId"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,quoteId"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Stop** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stop"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Stop** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update Stop",
        "description": "Update an existing **Stop** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Stop"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-stop"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Stop** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stop"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Stop** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Stop instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/stop-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Stop (destroy)",
        "description": "Delete the **Stop** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Stop"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-stop"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Stop** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stop"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Stop** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/stop/{_id}/{association}": {
      "get": {
        "summary": "Populate association for Stop",
        "description": "Populate and return foreign record(s) for the given association of this **Stop** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/populate-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/populate-where"
        },
        "tags": [
          "Stop"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-stop"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "quoteId"
              ]
            },
            "description": "The name of the association"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,city,zipcode,state,country,miles,quoteId"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,city,zipcode,state,country,miles,quoteId"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the list of associated records as JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/quote"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Cannot populate, **Stop** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/task": {
      "get": {
        "summary": "List Task (find where)",
        "description": "Find a list of **Task** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,subject,description,priority,dueDateTime,reminderDateTime,category,status,assignedTo,pointOfContact,quoteId,companyId,inventoryId,userId"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,subject,description,priority,dueDateTime,reminderDateTime,category,status,assignedTo,pointOfContact,quoteId,companyId,inventoryId,userId"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,assignedTo,pointOfContact,quoteId,companyId,inventoryId,userId"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **Task** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/task"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create Task",
        "description": "Create a new **Task** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "Task"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **Task** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/task"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Task instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/task"
              }
            }
          }
        }
      }
    },
    "/task/{_id}": {
      "get": {
        "summary": "Get Task (find one)",
        "description": "Look up the **Task** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-task"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,subject,description,priority,dueDateTime,reminderDateTime,category,status,assignedTo,pointOfContact,quoteId,companyId,inventoryId,userId"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,subject,description,priority,dueDateTime,reminderDateTime,category,status,assignedTo,pointOfContact,quoteId,companyId,inventoryId,userId"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "populate",
            "required": false,
            "schema": {
              "type": "string",
              "example": "false,assignedTo,pointOfContact,quoteId,companyId,inventoryId,userId"
            },
            "description": "If specified, overide the default automatic population process. Accepts a comma-separated list of attribute names for which to populate record values, or specify `false` to have no attributes populated."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **Task** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/task"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **Task** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update Task",
        "description": "Update an existing **Task** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-task"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **Task** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/task"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **Task** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the Task instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/task-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Task (destroy)",
        "description": "Delete the **Task** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-task"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **Task** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/task"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **Task** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/task/{_id}/{association}": {
      "get": {
        "summary": "Populate association for Task",
        "description": "Populate and return foreign record(s) for the given association of this **Task** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/populate-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/populate-where"
        },
        "tags": [
          "Task"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-task"
          },
          {
            "in": "path",
            "name": "association",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "assignedTo",
                "pointOfContact",
                "quoteId",
                "companyId",
                "inventoryId",
                "userId"
              ]
            },
            "description": "The name of the association"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,subject,description,priority,dueDateTime,reminderDateTime,category,status,assignedTo,pointOfContact,quoteId,companyId,inventoryId,userId"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,type,subject,description,priority,dueDateTime,reminderDateTime,category,status,assignedTo,pointOfContact,quoteId,companyId,inventoryId,userId"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the list of associated records as JSON dictionaries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/user"
                      },
                      {
                        "$ref": "#/components/schemas/contact"
                      },
                      {
                        "$ref": "#/components/schemas/quote"
                      },
                      {
                        "$ref": "#/components/schemas/company"
                      },
                      {
                        "$ref": "#/components/schemas/inventory"
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Cannot populate, **Task** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/user": {
      "get": {
        "summary": "List User (find where)",
        "description": "Find a list of **User** records that match the specified criteria.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-where",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-where"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AttributeFilterParam"
          },
          {
            "$ref": "#/components/parameters/WhereQueryParam"
          },
          {
            "$ref": "#/components/parameters/LimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/SkipQueryParam"
          },
          {
            "$ref": "#/components/parameters/SortQueryParam"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,email,password,firstName,lastName,fullName,isSuperAdmin,isAdmin,passwordResetToken,passwordResetTokenExpiresAt,emailProofToken,emailProofTokenExpiresAt,userImage,jobTitle,department,location,phoneNumber,extension"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,email,password,firstName,lastName,fullName,isSuperAdmin,isAdmin,passwordResetToken,passwordResetTokenExpiresAt,emailProofToken,emailProofTokenExpiresAt,userImage,jobTitle,department,location,phoneNumber,extension"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a paged list of **User** records that match the specified criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/user"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create User",
        "description": "Create a new **User** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/create",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/create"
        },
        "tags": [
          "User"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the newly created **User** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the User instance to create.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user"
              }
            }
          }
        }
      }
    },
    "/user/{_id}": {
      "get": {
        "summary": "Get User (find one)",
        "description": "Look up the **User** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/find-one",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/find-one"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-user"
          },
          {
            "in": "query",
            "name": "select",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,email,password,firstName,lastName,fullName,isSuperAdmin,isAdmin,passwordResetToken,passwordResetTokenExpiresAt,emailProofToken,emailProofTokenExpiresAt,userImage,jobTitle,department,location,phoneNumber,extension"
            },
            "description": "The attributes to include in the result, specified as a comma-delimited list. By default, all attributes are selected. Not valid for plural (“collection”) association attributes."
          },
          {
            "in": "query",
            "name": "omit",
            "required": false,
            "schema": {
              "type": "string",
              "example": "id,createdAt,updatedAt,email,password,firstName,lastName,fullName,isSuperAdmin,isAdmin,passwordResetToken,passwordResetTokenExpiresAt,emailProofToken,emailProofTokenExpiresAt,userImage,jobTitle,department,location,phoneNumber,extension"
            },
            "description": "The attributes to exclude from the result, specified as a comma-delimited list. Cannot be used in conjuction with `select`. Not valid for plural (“collection”) association attributes."
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a single **User** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "404": {
            "description": "Response denoting **User** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "summary": "Update User",
        "description": "Update an existing **User** record.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/update",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/update"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-user"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with the newly updated **User** record as a JSON dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "400": {
            "description": "Validation errors; details in JSON response"
          },
          "404": {
            "description": "Cannot update, **User** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "description": "JSON dictionary representing the User instance to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user-without-required-constraint"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete User (destroy)",
        "description": "Delete the **User** record with the specified ID.",
        "externalDocs": {
          "url": "https://sailsjs.com/documentation/reference/blueprint-api/destroy",
          "description": "See https://sailsjs.com/documentation/reference/blueprint-api/destroy"
        },
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ModelPKParam-user"
          }
        ],
        "responses": {
          "200": {
            "description": "Responds with a JSON dictionary representing the destroyed **User** instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "404": {
            "description": "Cannot destroy, **User** record with specified ID **NOT** found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  }
}